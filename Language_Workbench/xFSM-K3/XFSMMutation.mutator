generate exhaustive mutants
in "data/out/"
from "data/model/"
metamodel "/XFSMMutation/data/model/k3fsm.ecore"

with blocks {
	cis "Changes the initial state to a different one"{
		sm = select one FSM
		cis = select one State in sm->initialState 
		nis = select one State where {self <> cis}
		modify sm with {initialState = nis}
		//faulty element: fsm->initialState
	}
	cst "Changes the source state of a transition"{
		transition = select one Transition
		state = select one State where {self <> transition->^source}
		modify transition with {^source = state}
		//faulty element: transition->source && the the source state of the transition before modification && the the source state of the transition after modification
	}
	ctt "Changes the target state of a transition"{
		transition = select one Transition
		state = select one State where {self <> transition->^target}
		modify transition with {^target = state}
		//faulty element: transition->target && the the target state of the transition before modification && the the target state of the transition after modification
	}
	mti "change input of a transition"{
		modify one Transition with {input = random-string(1, 4)}
		//faulty element: transition->input
	}
	mto "change output of a transition"{
		modify one Transition with {output = random-string(1, 4)}
		//faulty element: transition->output
	}
//	ccs "Creates a connected state" {
//		fsm = select one FSM
//		randomState = select one State where {owningFSM = fsm}
//		newState = create State with {name = random-string(1, 4), owningFSM = fsm}
//		create Transition with {^source = randomState, ^target = newState, name = random-string(1, 4)}
//	}
//	ctr "Creates a transition with random source and target states"{
//		randomState1 = select one State
//		randomState2 = select one State
//		create Transition with {name = random-string(1, 4), ^source = randomState1, ^target = randomState2}
//	}
//	ctr2 "Creates a transition with source but without target state"{
//		randomState = select one State
//		create Transition with {name = random-string(1, 4), ^source = randomState}
//	}
//	rtr "Removes a transition"{
//		remove one Transition
//	}
//	dtr "Duplicates a transition"{
//		deep clone one Transition
//	}
//	rst "Removes a state and adjacent transitions"{
//		remove one State
//	}
//	sdt "Swaps the direction of a transition"{
//		modify one Transition with {swapref(^source, ^target)}
//	}
}