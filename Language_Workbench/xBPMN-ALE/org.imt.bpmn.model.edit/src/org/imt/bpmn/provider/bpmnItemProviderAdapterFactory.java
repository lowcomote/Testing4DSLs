/**
 */
package org.imt.bpmn.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.imt.bpmn.util.bpmnAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class bpmnItemProviderAdapterFactory extends bpmnAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public bpmnItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.imt.bpmn.Microflow} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MicroflowItemProvider microflowItemProvider;

	/**
	 * This creates an adapter for a {@link org.imt.bpmn.Microflow}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMicroflowAdapter() {
		if (microflowItemProvider == null) {
			microflowItemProvider = new MicroflowItemProvider(this);
		}

		return microflowItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.imt.bpmn.MicroflowElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MicroflowElementItemProvider microflowElementItemProvider;

	/**
	 * This creates an adapter for a {@link org.imt.bpmn.MicroflowElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMicroflowElementAdapter() {
		if (microflowElementItemProvider == null) {
			microflowElementItemProvider = new MicroflowElementItemProvider(this);
		}

		return microflowElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.imt.bpmn.SequenceFlow} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SequenceFlowItemProvider sequenceFlowItemProvider;

	/**
	 * This creates an adapter for a {@link org.imt.bpmn.SequenceFlow}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSequenceFlowAdapter() {
		if (sequenceFlowItemProvider == null) {
			sequenceFlowItemProvider = new SequenceFlowItemProvider(this);
		}

		return sequenceFlowItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.imt.bpmn.CreateObject} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CreateObjectItemProvider createObjectItemProvider;

	/**
	 * This creates an adapter for a {@link org.imt.bpmn.CreateObject}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCreateObjectAdapter() {
		if (createObjectItemProvider == null) {
			createObjectItemProvider = new CreateObjectItemProvider(this);
		}

		return createObjectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.imt.bpmn.DeleteObject} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DeleteObjectItemProvider deleteObjectItemProvider;

	/**
	 * This creates an adapter for a {@link org.imt.bpmn.DeleteObject}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDeleteObjectAdapter() {
		if (deleteObjectItemProvider == null) {
			deleteObjectItemProvider = new DeleteObjectItemProvider(this);
		}

		return deleteObjectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.imt.bpmn.ChangeObject} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ChangeObjectItemProvider changeObjectItemProvider;

	/**
	 * This creates an adapter for a {@link org.imt.bpmn.ChangeObject}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createChangeObjectAdapter() {
		if (changeObjectItemProvider == null) {
			changeObjectItemProvider = new ChangeObjectItemProvider(this);
		}

		return changeObjectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.imt.bpmn.RetrieveObject} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RetrieveObjectItemProvider retrieveObjectItemProvider;

	/**
	 * This creates an adapter for a {@link org.imt.bpmn.RetrieveObject}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRetrieveObjectAdapter() {
		if (retrieveObjectItemProvider == null) {
			retrieveObjectItemProvider = new RetrieveObjectItemProvider(this);
		}

		return retrieveObjectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.imt.bpmn.MicroflowCall} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MicroflowCallItemProvider microflowCallItemProvider;

	/**
	 * This creates an adapter for a {@link org.imt.bpmn.MicroflowCall}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMicroflowCallAdapter() {
		if (microflowCallItemProvider == null) {
			microflowCallItemProvider = new MicroflowCallItemProvider(this);
		}

		return microflowCallItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.imt.bpmn.CreateVariable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CreateVariableItemProvider createVariableItemProvider;

	/**
	 * This creates an adapter for a {@link org.imt.bpmn.CreateVariable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCreateVariableAdapter() {
		if (createVariableItemProvider == null) {
			createVariableItemProvider = new CreateVariableItemProvider(this);
		}

		return createVariableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.imt.bpmn.ChangeVariable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ChangeVariableItemProvider changeVariableItemProvider;

	/**
	 * This creates an adapter for a {@link org.imt.bpmn.ChangeVariable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createChangeVariableAdapter() {
		if (changeVariableItemProvider == null) {
			changeVariableItemProvider = new ChangeVariableItemProvider(this);
		}

		return changeVariableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.imt.bpmn.ShowMessage} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ShowMessageItemProvider showMessageItemProvider;

	/**
	 * This creates an adapter for a {@link org.imt.bpmn.ShowMessage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createShowMessageAdapter() {
		if (showMessageItemProvider == null) {
			showMessageItemProvider = new ShowMessageItemProvider(this);
		}

		return showMessageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.imt.bpmn.StartEvent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StartEventItemProvider startEventItemProvider;

	/**
	 * This creates an adapter for a {@link org.imt.bpmn.StartEvent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStartEventAdapter() {
		if (startEventItemProvider == null) {
			startEventItemProvider = new StartEventItemProvider(this);
		}

		return startEventItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.imt.bpmn.EndEvent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EndEventItemProvider endEventItemProvider;

	/**
	 * This creates an adapter for a {@link org.imt.bpmn.EndEvent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEndEventAdapter() {
		if (endEventItemProvider == null) {
			endEventItemProvider = new EndEventItemProvider(this);
		}

		return endEventItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.imt.bpmn.Variable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VariableItemProvider variableItemProvider;

	/**
	 * This creates an adapter for a {@link org.imt.bpmn.Variable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVariableAdapter() {
		if (variableItemProvider == null) {
			variableItemProvider = new VariableItemProvider(this);
		}

		return variableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.imt.bpmn.Entity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EntityItemProvider entityItemProvider;

	/**
	 * This creates an adapter for a {@link org.imt.bpmn.Entity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEntityAdapter() {
		if (entityItemProvider == null) {
			entityItemProvider = new EntityItemProvider(this);
		}

		return entityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.imt.bpmn.Reference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReferenceItemProvider referenceItemProvider;

	/**
	 * This creates an adapter for a {@link org.imt.bpmn.Reference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReferenceAdapter() {
		if (referenceItemProvider == null) {
			referenceItemProvider = new ReferenceItemProvider(this);
		}

		return referenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.imt.bpmn.BasicVariable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BasicVariableItemProvider basicVariableItemProvider;

	/**
	 * This creates an adapter for a {@link org.imt.bpmn.BasicVariable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBasicVariableAdapter() {
		if (basicVariableItemProvider == null) {
			basicVariableItemProvider = new BasicVariableItemProvider(this);
		}

		return basicVariableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.imt.bpmn.IntegerVariable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IntegerVariableItemProvider integerVariableItemProvider;

	/**
	 * This creates an adapter for a {@link org.imt.bpmn.IntegerVariable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIntegerVariableAdapter() {
		if (integerVariableItemProvider == null) {
			integerVariableItemProvider = new IntegerVariableItemProvider(this);
		}

		return integerVariableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.imt.bpmn.BooleanVariable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BooleanVariableItemProvider booleanVariableItemProvider;

	/**
	 * This creates an adapter for a {@link org.imt.bpmn.BooleanVariable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBooleanVariableAdapter() {
		if (booleanVariableItemProvider == null) {
			booleanVariableItemProvider = new BooleanVariableItemProvider(this);
		}

		return booleanVariableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.imt.bpmn.StringVariable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StringVariableItemProvider stringVariableItemProvider;

	/**
	 * This creates an adapter for a {@link org.imt.bpmn.StringVariable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStringVariableAdapter() {
		if (stringVariableItemProvider == null) {
			stringVariableItemProvider = new StringVariableItemProvider(this);
		}

		return stringVariableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.imt.bpmn.IntegerValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IntegerValueItemProvider integerValueItemProvider;

	/**
	 * This creates an adapter for a {@link org.imt.bpmn.IntegerValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIntegerValueAdapter() {
		if (integerValueItemProvider == null) {
			integerValueItemProvider = new IntegerValueItemProvider(this);
		}

		return integerValueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.imt.bpmn.BooleanValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BooleanValueItemProvider booleanValueItemProvider;

	/**
	 * This creates an adapter for a {@link org.imt.bpmn.BooleanValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBooleanValueAdapter() {
		if (booleanValueItemProvider == null) {
			booleanValueItemProvider = new BooleanValueItemProvider(this);
		}

		return booleanValueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.imt.bpmn.StringValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StringValueItemProvider stringValueItemProvider;

	/**
	 * This creates an adapter for a {@link org.imt.bpmn.StringValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStringValueAdapter() {
		if (stringValueItemProvider == null) {
			stringValueItemProvider = new StringValueItemProvider(this);
		}

		return stringValueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.imt.bpmn.ForkDecision} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ForkDecisionItemProvider forkDecisionItemProvider;

	/**
	 * This creates an adapter for a {@link org.imt.bpmn.ForkDecision}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createForkDecisionAdapter() {
		if (forkDecisionItemProvider == null) {
			forkDecisionItemProvider = new ForkDecisionItemProvider(this);
		}

		return forkDecisionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.imt.bpmn.MergeDecision} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MergeDecisionItemProvider mergeDecisionItemProvider;

	/**
	 * This creates an adapter for a {@link org.imt.bpmn.MergeDecision}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMergeDecisionAdapter() {
		if (mergeDecisionItemProvider == null) {
			mergeDecisionItemProvider = new MergeDecisionItemProvider(this);
		}

		return mergeDecisionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.imt.bpmn.IntegerComparisonExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IntegerComparisonExpressionItemProvider integerComparisonExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link org.imt.bpmn.IntegerComparisonExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIntegerComparisonExpressionAdapter() {
		if (integerComparisonExpressionItemProvider == null) {
			integerComparisonExpressionItemProvider = new IntegerComparisonExpressionItemProvider(this);
		}

		return integerComparisonExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.imt.bpmn.StringComparisonExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StringComparisonExpressionItemProvider stringComparisonExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link org.imt.bpmn.StringComparisonExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStringComparisonExpressionAdapter() {
		if (stringComparisonExpressionItemProvider == null) {
			stringComparisonExpressionItemProvider = new StringComparisonExpressionItemProvider(this);
		}

		return stringComparisonExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.imt.bpmn.BooleanBinaryExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BooleanBinaryExpressionItemProvider booleanBinaryExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link org.imt.bpmn.BooleanBinaryExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBooleanBinaryExpressionAdapter() {
		if (booleanBinaryExpressionItemProvider == null) {
			booleanBinaryExpressionItemProvider = new BooleanBinaryExpressionItemProvider(this);
		}

		return booleanBinaryExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.imt.bpmn.BooleanUnaryExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BooleanUnaryExpressionItemProvider booleanUnaryExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link org.imt.bpmn.BooleanUnaryExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBooleanUnaryExpressionAdapter() {
		if (booleanUnaryExpressionItemProvider == null) {
			booleanUnaryExpressionItemProvider = new BooleanUnaryExpressionItemProvider(this);
		}

		return booleanUnaryExpressionItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (microflowItemProvider != null) microflowItemProvider.dispose();
		if (microflowElementItemProvider != null) microflowElementItemProvider.dispose();
		if (sequenceFlowItemProvider != null) sequenceFlowItemProvider.dispose();
		if (createObjectItemProvider != null) createObjectItemProvider.dispose();
		if (deleteObjectItemProvider != null) deleteObjectItemProvider.dispose();
		if (changeObjectItemProvider != null) changeObjectItemProvider.dispose();
		if (retrieveObjectItemProvider != null) retrieveObjectItemProvider.dispose();
		if (microflowCallItemProvider != null) microflowCallItemProvider.dispose();
		if (createVariableItemProvider != null) createVariableItemProvider.dispose();
		if (changeVariableItemProvider != null) changeVariableItemProvider.dispose();
		if (showMessageItemProvider != null) showMessageItemProvider.dispose();
		if (startEventItemProvider != null) startEventItemProvider.dispose();
		if (endEventItemProvider != null) endEventItemProvider.dispose();
		if (variableItemProvider != null) variableItemProvider.dispose();
		if (entityItemProvider != null) entityItemProvider.dispose();
		if (referenceItemProvider != null) referenceItemProvider.dispose();
		if (basicVariableItemProvider != null) basicVariableItemProvider.dispose();
		if (integerVariableItemProvider != null) integerVariableItemProvider.dispose();
		if (booleanVariableItemProvider != null) booleanVariableItemProvider.dispose();
		if (stringVariableItemProvider != null) stringVariableItemProvider.dispose();
		if (integerValueItemProvider != null) integerValueItemProvider.dispose();
		if (booleanValueItemProvider != null) booleanValueItemProvider.dispose();
		if (stringValueItemProvider != null) stringValueItemProvider.dispose();
		if (forkDecisionItemProvider != null) forkDecisionItemProvider.dispose();
		if (mergeDecisionItemProvider != null) mergeDecisionItemProvider.dispose();
		if (integerComparisonExpressionItemProvider != null) integerComparisonExpressionItemProvider.dispose();
		if (stringComparisonExpressionItemProvider != null) stringComparisonExpressionItemProvider.dispose();
		if (booleanBinaryExpressionItemProvider != null) booleanBinaryExpressionItemProvider.dispose();
		if (booleanUnaryExpressionItemProvider != null) booleanUnaryExpressionItemProvider.dispose();
	}

}
