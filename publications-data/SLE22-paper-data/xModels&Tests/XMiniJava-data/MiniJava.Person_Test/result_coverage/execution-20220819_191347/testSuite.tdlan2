Package TestSuite {
	//test cases
	VariableDeclaration age (_name = "age");
	SymbolBinding symbolBinding (symbol = ?);
	IntegerValue intValue (value = ?);
	
	Test Description test1 uses configuration PersonConfiguration1{
		tester.genericGate sends runModel to xminijava.genericGate;
		tester.genericGate sends getModelState to xminijava.genericGate;
		xminijava.genericGate sends symbolBinding (symbol = age, value = intValue (value = "23")) to tester.genericGate;
	}
	
	VariableDeclaration salary (_name = "salary");
	Test Description test2 uses configuration PersonConfiguration2{
		tester.genericGate sends runModel to xminijava.genericGate;
		tester.genericGate sends getModelState to xminijava.genericGate;
		xminijava.genericGate sends symbolBinding (symbol = salary, value = intValue (value = "2500")) to tester.genericGate;
	}
	
	VariableDeclaration married (_name = "married");
	BooleanValue boolValue (value = ?);
	Test Description test3 uses configuration PersonConfiguration3{
		tester.genericGate sends runModel to xminijava.genericGate;
		tester.genericGate sends getModelState to xminijava.genericGate;
		xminijava.genericGate sends symbolBinding (symbol = married, value = boolValue (value = "false")) to tester.genericGate;
	}
	
	VariableDeclaration result (_name = "result");
	Test Description test4 uses configuration PersonConfiguration4{
		tester.genericGate sends runModel to xminijava.genericGate;
		tester.genericGate sends getModelState to xminijava.genericGate;
		xminijava.genericGate sends symbolBinding (symbol = result, value = boolValue (value = "true")) to tester.genericGate;
	}
	Test Description test5 uses configuration PersonConfiguration5{
		tester.genericGate sends runModel to xminijava.genericGate;
		tester.genericGate sends getModelState to xminijava.genericGate;
		xminijava.genericGate sends symbolBinding (symbol = result, value = boolValue (value = "false")) to tester.genericGate;
	}
	Test Description test6 uses configuration PersonConfiguration6{
		tester.genericGate sends runModel to xminijava.genericGate;
		tester.genericGate sends getModelState to xminijava.genericGate;
		xminijava.genericGate sends symbolBinding (symbol = result, value = boolValue (value = "false")) to tester.genericGate;
	}
	Test Description test7 uses configuration PersonConfiguration7{
		tester.genericGate sends runModel to xminijava.genericGate;
		tester.genericGate sends getModelState to xminijava.genericGate;
		xminijava.genericGate sends symbolBinding (symbol = result, value = boolValue (value = "true")) to tester.genericGate;
	}
	Test Description test8 uses configuration PersonConfiguration8{
		tester.genericGate sends runModel to xminijava.genericGate;
		tester.genericGate sends getModelState to xminijava.genericGate;
		xminijava.genericGate sends symbolBinding (symbol = result, value = boolValue (value = "false")) to tester.genericGate;
	}
	Test Description test9 uses configuration PersonConfiguration9{
		tester.genericGate sends runModel to xminijava.genericGate;
		tester.genericGate sends getModelState to xminijava.genericGate;
		xminijava.genericGate sends symbolBinding (symbol = result, value = boolValue (value = "true")) to tester.genericGate;
	}
	Test Description test10 uses configuration PersonConfiguration10{
		tester.genericGate sends runModel to xminijava.genericGate;
		tester.genericGate sends getModelState to xminijava.genericGate;
		xminijava.genericGate sends symbolBinding (symbol = result, value = boolValue (value = "true")) to tester.genericGate;
	}
	Test Description test11 uses configuration PersonConfiguration11{
		tester.genericGate sends runModel to xminijava.genericGate;
		tester.genericGate sends getModelState to xminijava.genericGate;
		xminijava.genericGate sends symbolBinding (symbol = result, value = boolValue (value = "true")) to tester.genericGate;
	}
	Test Description test12 uses configuration PersonConfiguration12{
		tester.genericGate sends runModel to xminijava.genericGate;
		tester.genericGate sends getModelState to xminijava.genericGate;
		xminijava.genericGate sends symbolBinding (symbol = result, value = boolValue (value = "false")) to tester.genericGate;
	}
	Test Description test13 uses configuration PersonConfiguration13{
		tester.genericGate sends runModel to xminijava.genericGate;
		tester.genericGate sends getModelState to xminijava.genericGate;
		xminijava.genericGate sends symbolBinding (symbol = result, value = boolValue (value = "false")) to tester.genericGate;
	}
	Test Description test14 uses configuration PersonConfiguration14{
		tester.genericGate sends runModel to xminijava.genericGate;
		tester.genericGate sends getModelState to xminijava.genericGate;
		xminijava.genericGate sends symbolBinding (symbol = result, value = boolValue (value = "false")) to tester.genericGate;
	}
	Test Description test15 uses configuration PersonConfiguration15{
		tester.genericGate sends runModel to xminijava.genericGate;
		tester.genericGate sends getModelState to xminijava.genericGate;
		xminijava.genericGate sends symbolBinding (symbol = result, value = boolValue (value = "false")) to tester.genericGate;
	}
	Test Description test16 uses configuration PersonConfiguration16{
		tester.genericGate sends runModel to xminijava.genericGate;
		tester.genericGate sends getModelState to xminijava.genericGate;
		xminijava.genericGate sends symbolBinding (symbol = result, value = boolValue (value = "false")) to tester.genericGate;
	}
	Test Description test17 uses configuration PersonConfiguration17{
		tester.genericGate sends runModel to xminijava.genericGate;
		tester.genericGate sends getModelState to xminijava.genericGate;
		xminijava.genericGate sends symbolBinding (symbol = result, value = boolValue (value = "false")) to tester.genericGate;
	}
	Test Description test18 uses configuration PersonConfiguration18{
		tester.genericGate sends runModel to xminijava.genericGate;
		tester.genericGate sends getModelState to xminijava.genericGate;
		xminijava.genericGate sends symbolBinding (symbol = result, value = boolValue (value = "false")) to tester.genericGate;
	}
	Test Description test19 uses configuration PersonConfiguration19{
		tester.genericGate sends runModel to xminijava.genericGate;
		tester.genericGate sends getModelState to xminijava.genericGate;
		xminijava.genericGate sends symbolBinding (symbol = result, value = boolValue (value = "false")) to tester.genericGate;
	}
	//data types
	Type Program ( _name of type EString , imports of type _Import , classes of type TypeDeclaration , state of type State with { dynamic ;
	} ) ;
	Type _Import ( importedNamespace of type EString ) ;
	Type TypeDeclaration extends NamedElement ( accessLevel of type AccessLevel , implements of type Interface , members of type Member ) ;
	Type Class extends TypeDeclaration ( abstract of type EBoolean , superClass of type Class ) ;
	Type Interface extends TypeDeclaration ( ) ;
	Type Member extends TypedDeclaration ( access of type AccessLevel ) ;
	Type Method extends Member ( abstract of type EBoolean , static of type EBoolean , params of type Parameter , body of type Block ) ;
	Type Parameter extends Symbol ( ) ;
	Type Field extends Member ( defaultValue of type Expression ) ;
	Type AccessLevel ;
	Type Block extends Statement ( statements of type Statement ) ;
	Type Statement ( ) ;
	Type PrintStatement extends Statement ( expression of type Expression ) ;
	Type Return extends Statement ( expression of type Expression ) ;
	Type IfStatement extends Statement ( expression of type Expression , thenBlock of type Block , elseBlock of type Block ) ;
	Type WhileStatement extends Statement ( condition of type Expression , block of type Block ) ;
	Type ForStatement extends Statement ( declaration of type Assignment , condition of type Expression , progression of type Assignment , block of type Block ) ;
	Type TypeRef ( ) ;
	Type SingleTypeRef ( ) ;
	Type ClassRef extends SingleTypeRef ( referencedClass of type TypeDeclaration ) ;
	Type NamedElement ( _name of type EString ) ;
	Type TypedDeclaration extends NamedElement ( typeRef of type TypeRef ) ;
	Type Symbol extends TypedDeclaration ( ) ;
	Type VariableDeclaration extends Symbol();
	//Type VariableDeclaration extends Assignee () ;
	Type Assignment extends Statement ( assignee of type Assignee , value of type Expression ) ;
	Type Assignee ( ) ;
	Type Expression ( ) ;
	Type ArrayTypeRef extends TypeRef ( typeRef of type SingleTypeRef ) ;
	Type IntegerTypeRef ( ) ;
	Type BooleanTypeRef ( ) ;
	Type StringTypeRef ( ) ;
	Type VoidTypeRef ( ) ;
	Type Or extends Expression ( left of type Expression , right of type Expression ) ;
	Type And extends Expression ( left of type Expression , right of type Expression ) ;
	Type Equality extends Expression ( left of type Expression , right of type Expression ) ;
	Type Inequality extends Expression ( left of type Expression , right of type Expression ) ;
	Type SuperiorOrEqual extends Expression ( left of type Expression , right of type Expression ) ;
	Type InferiorOrEqual extends Expression ( left of type Expression , right of type Expression ) ;
	Type Superior extends Expression ( left of type Expression , right of type Expression ) ;
	Type Inferior extends Expression ( left of type Expression , right of type Expression ) ;
	Type Plus extends Expression ( left of type Expression , right of type Expression ) ;
	Type Minus extends Expression ( left of type Expression , right of type Expression ) ;
	Type Multiplication extends Expression ( left of type Expression , right of type Expression ) ;
	Type Division extends Expression ( left of type Expression , right of type Expression ) ;
	Type ArrayAccess extends Expression ( object of type Expression , index of type Expression ) ;
	Type ArrayLength extends Expression ( array of type Expression ) ;
	Type Not extends Expression ( expression of type Expression ) ;
	Type Neg extends Expression ( expression of type Expression ) ;
	Type FieldAccess extends Expression ( receiver of type Expression , field of type Field ) ;
	Type MethodCall extends Expression ( receiver of type Expression , method of type Method , args of type Expression ) ;
	Type StringConstant extends Expression ( value of type EString ) ;
	Type IntConstant extends Expression ( value of type EInt ) ;
	Type BoolConstant extends Expression ( value of type EString ) ;
	Type This ( ) ;
	Type Super ( ) ;
	Type Null ( ) ;
	Type NewObject extends Expression ( _type of type Class , args of type Expression ) ;
	Type NewArray extends Expression ( _type of type TypeRef , _size of type Expression ) ;
	Type SymbolRef extends Expression ( symbol of type Symbol ) ;
	Type Context ( _bindings of type SymbolBinding , parentContext of type Context , childContext of type Context ) with {
		dynamic ;
	} ;
	Type Value ( ) with {
		dynamic ;
	} ;
	Type IntegerValue extends Value ( value of type EInt ) with {
		dynamic ;
	} ;
	Type SymbolBinding ( value of type Value , symbol of type Symbol ) with {
		dynamic ;
	} ;
	Type FieldBinding ( field of type Field , value of type Value ) with {
		dynamic ;
	} ;
	Type StringValue extends Value ( value of type EString ) with {
		dynamic ;
	} ;
	Type BooleanValue extends Value ( value of type EBoolean ) with {
		dynamic ;
	} ;
	Type OutputStream ( stream of type EString ) with {
		dynamic ;
	} ;
	Type State ( rootFrame of type Frame , objectsHeap of type ObjectInstance , outputStream of type OutputStream , arraysHeap of type ArrayInstance ) with {
		dynamic ;
	} ;
	Type Frame ( call of type Call , _instance of type ObjectInstance , childFrame of type Frame , parentFrame of type Frame , rootContext of type Context , returnValue of type Value ) with {
		dynamic ;
	} ;
	Type NullValue ( ) with {
		dynamic ;
	} ;
	Type Call ( ) with {
		dynamic ;
	} ;
	Type NewCall extends Call ( _new of type NewObject ) with {
		dynamic ;
	} ;
	Type MethodCall2 extends Call ( methodcall of type MethodCall ) with {
		dynamic ;
	} ;
	Type ObjectInstance ( fieldbindings of type FieldBinding , _type of type Class ) with {
		dynamic ;
	} ;
	Type ArrayInstance ( value of type Value , _size of type EInt ) with {
		dynamic ;
	} ;
	Type ObjectRefValue extends Value ( _instance of type ObjectInstance ) with {
		dynamic ;
	} ;
	Type ArrayRefValue extends Value ( _instance of type ArrayInstance ) with {
		dynamic ;
	} ;
	AccessLevel PRIVATE ;
	AccessLevel PROTECTED ;
	AccessLevel PUBLIC ;
	Annotation dynamic ;
	Type EBoolean ;
	Type EDoubleObject ;
	Type EShort ;
	Type ETreeIterator ;
	Type EInvocationTargetException ;
	Type EResource ;
	Type EInt ;
	Type EJavaClass ;
	Type EDiagnosticChain ;
	Type EFeatureMap ;
	Type EFeatureMapEntry ;
	Type EBooleanObject ;
	Type EEList ;
	Type ELongObject ;
	Type EEnumerator ;
	Type EResourceSet ;
	Type EDate ;
	Type EDouble ;
	Type EIntegerObject ;
	Type EBigInteger ;
	Type EFloatObject ;
	Type EJavaObject ;
	Type EString ;
	Type EFloat ;
	Type EShortObject ;
	Type EBigDecimal ;
	Type EChar ;
	Type ECharacterObject ;
	Type ELong ;
	Type EByteArray ;
	Type EMap ;
	Type EByte ;
	Type EByteObject ;
	
	//common
	Type OCL ( query of type EString ) ;
	OCL oclQuery ( query = ? ) ;
	Type Verdict ;
	Verdict PASS ;
	Verdict FAIL ;
	Verdict INCONCLUSINVE ;
	Type modelExecutionCommand ;
	modelExecutionCommand runModel ;
	modelExecutionCommand runModelAsynchronous ;
	modelExecutionCommand stopModelExecution ;
	modelExecutionCommand resetModel ;
	modelExecutionCommand getModelState ;
	
	//test configuration
	Gate Type genericGateType accepts modelExecutionCommand ;
	Gate Type oclGateType accepts OCL ;
	Component Type TestSystem having {
		gate genericGate of type genericGateType ;
		gate oclGate of type oclGateType ;
	}
	Component Type MUT having {
		gate genericGate of type genericGateType ;
		gate oclGate of type oclGateType ;
	}
	Annotation MUTPath ;
	Annotation DSLName ;
	//test configurations for person models
	Test Configuration PersonConfiguration1 {
		create Tester tester of type TestSystem ;
		create SUT xminijava of type MUT with { 
			MUTPath : '/xMiniJava_models/person_models.xmi/Person_test1.xmi' ; 
			DSLName : 'MinijavaDSL' ; 
		} ;
		connect tester.genericGate to xminijava.genericGate ;
		connect tester.oclGate to xminijava.oclGate ;
	}
	Test Configuration PersonConfiguration2 {
		create Tester tester of type TestSystem ;
		create SUT xminijava of type MUT with { 
			MUTPath : '/xMiniJava_models/person_models.xmi/Person_test2.xmi' ; 
			DSLName : 'MinijavaDSL' ; 
		} ;
		connect tester.genericGate to xminijava.genericGate ;
		connect tester.oclGate to xminijava.oclGate ;
	}
	Test Configuration PersonConfiguration3 {
		create Tester tester of type TestSystem ;
		create SUT xminijava of type MUT with { 
			MUTPath : '/xMiniJava_models/person_models.xmi/Person_test3.xmi' ; 
			DSLName : 'MinijavaDSL' ; 
		} ;
		connect tester.genericGate to xminijava.genericGate ;
		connect tester.oclGate to xminijava.oclGate ;
	}
	Test Configuration PersonConfiguration4 {
		create Tester tester of type TestSystem ;
		create SUT xminijava of type MUT with { 
			MUTPath : '/xMiniJava_models/person_models.xmi/Person_test4.xmi' ; 
			DSLName : 'MinijavaDSL' ; 
		} ;
		connect tester.genericGate to xminijava.genericGate ;
		connect tester.oclGate to xminijava.oclGate ;
	}
	Test Configuration PersonConfiguration5 {
		create Tester tester of type TestSystem ;
		create SUT xminijava of type MUT with { 
			MUTPath : '/xMiniJava_models/person_models.xmi/Person_test5.xmi' ; 
			DSLName : 'MinijavaDSL' ; 
		} ;
		connect tester.genericGate to xminijava.genericGate ;
		connect tester.oclGate to xminijava.oclGate ;
	}
	Test Configuration PersonConfiguration6 {
		create Tester tester of type TestSystem ;
		create SUT xminijava of type MUT with { 
			MUTPath : '/xMiniJava_models/person_models.xmi/Person_test6.xmi' ; 
			DSLName : 'MinijavaDSL' ; 
		} ;
		connect tester.genericGate to xminijava.genericGate ;
		connect tester.oclGate to xminijava.oclGate ;
	}
	Test Configuration PersonConfiguration7 {
		create Tester tester of type TestSystem ;
		create SUT xminijava of type MUT with { 
			MUTPath : '/xMiniJava_models/person_models.xmi/Person_test7.xmi' ; 
			DSLName : 'MinijavaDSL' ; 
		} ;
		connect tester.genericGate to xminijava.genericGate ;
		connect tester.oclGate to xminijava.oclGate ;
	}
	Test Configuration PersonConfiguration8 {
		create Tester tester of type TestSystem ;
		create SUT xminijava of type MUT with { 
			MUTPath : '/xMiniJava_models/person_models.xmi/Person_test8.xmi' ; 
			DSLName : 'MinijavaDSL' ; 
		} ;
		connect tester.genericGate to xminijava.genericGate ;
		connect tester.oclGate to xminijava.oclGate ;
	}
	Test Configuration PersonConfiguration9 {
		create Tester tester of type TestSystem ;
		create SUT xminijava of type MUT with { 
			MUTPath : '/xMiniJava_models/person_models.xmi/Person_test9.xmi' ; 
			DSLName : 'MinijavaDSL' ; 
		} ;
		connect tester.genericGate to xminijava.genericGate ;
		connect tester.oclGate to xminijava.oclGate ;
	}
	Test Configuration PersonConfiguration10 {
		create Tester tester of type TestSystem ;
		create SUT xminijava of type MUT with { 
			MUTPath : '/xMiniJava_models/person_models.xmi/Person_test10.xmi' ; 
			DSLName : 'MinijavaDSL' ; 
		} ;
		connect tester.genericGate to xminijava.genericGate ;
		connect tester.oclGate to xminijava.oclGate ;
	}
	Test Configuration PersonConfiguration11 {
		create Tester tester of type TestSystem ;
		create SUT xminijava of type MUT with { 
			MUTPath : '/xMiniJava_models/person_models.xmi/Person_test11.xmi' ; 
			DSLName : 'MinijavaDSL' ; 
		} ;
		connect tester.genericGate to xminijava.genericGate ;
		connect tester.oclGate to xminijava.oclGate ;
	}
	Test Configuration PersonConfiguration12 {
		create Tester tester of type TestSystem ;
		create SUT xminijava of type MUT with { 
			MUTPath : '/xMiniJava_models/person_models.xmi/Person_test12.xmi' ; 
			DSLName : 'MinijavaDSL' ; 
		} ;
		connect tester.genericGate to xminijava.genericGate ;
		connect tester.oclGate to xminijava.oclGate ;
	}
	Test Configuration PersonConfiguration13 {
		create Tester tester of type TestSystem ;
		create SUT xminijava of type MUT with { 
			MUTPath : '/xMiniJava_models/person_models.xmi/Person_test13.xmi' ; 
			DSLName : 'MinijavaDSL' ; 
		} ;
		connect tester.genericGate to xminijava.genericGate ;
		connect tester.oclGate to xminijava.oclGate ;
	}
	Test Configuration PersonConfiguration14 {
		create Tester tester of type TestSystem ;
		create SUT xminijava of type MUT with { 
			MUTPath : '/xMiniJava_models/person_models.xmi/Person_test14.xmi' ; 
			DSLName : 'MinijavaDSL' ; 
		} ;
		connect tester.genericGate to xminijava.genericGate ;
		connect tester.oclGate to xminijava.oclGate ;
	}
	Test Configuration PersonConfiguration15 {
		create Tester tester of type TestSystem ;
		create SUT xminijava of type MUT with { 
			MUTPath : '/xMiniJava_models/person_models.xmi/Person_test15.xmi' ; 
			DSLName : 'MinijavaDSL' ; 
		} ;
		connect tester.genericGate to xminijava.genericGate ;
		connect tester.oclGate to xminijava.oclGate ;
	}
	Test Configuration PersonConfiguration16 {
		create Tester tester of type TestSystem ;
		create SUT xminijava of type MUT with { 
			MUTPath : '/xMiniJava_models/person_models.xmi/Person_test16.xmi' ; 
			DSLName : 'MinijavaDSL' ; 
		} ;
		connect tester.genericGate to xminijava.genericGate ;
		connect tester.oclGate to xminijava.oclGate ;
	}
	Test Configuration PersonConfiguration17 {
		create Tester tester of type TestSystem ;
		create SUT xminijava of type MUT with { 
			MUTPath : '/xMiniJava_models/person_models.xmi/Person_test17.xmi' ; 
			DSLName : 'MinijavaDSL' ; 
		} ;
		connect tester.genericGate to xminijava.genericGate ;
		connect tester.oclGate to xminijava.oclGate ;
	}
	Test Configuration PersonConfiguration18 {
		create Tester tester of type TestSystem ;
		create SUT xminijava of type MUT with { 
			MUTPath : '/xMiniJava_models/person_models.xmi/Person_test18.xmi' ; 
			DSLName : 'MinijavaDSL' ; 
		} ;
		connect tester.genericGate to xminijava.genericGate ;
		connect tester.oclGate to xminijava.oclGate ;
	}
	Test Configuration PersonConfiguration19 {
		create Tester tester of type TestSystem ;
		create SUT xminijava of type MUT with { 
			MUTPath : '/xMiniJava_models/person_models.xmi/Person_test19.xmi' ; 
			DSLName : 'MinijavaDSL' ; 
		} ;
		connect tester.genericGate to xminijava.genericGate ;
		connect tester.oclGate to xminijava.oclGate ;
	}
}