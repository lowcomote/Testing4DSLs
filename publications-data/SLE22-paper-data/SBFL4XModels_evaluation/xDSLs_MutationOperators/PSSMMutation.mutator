generate 20 mutants
in "data/out/"
from "data/model/"
metamodel "/PSSMMutation/data/model/statemachines.ecore"

with blocks {
	cis "Changes the initial state to a different one" {
		initial = select one Pseudostate
		transition = select one Transition where {^source is typed Pseudostate and ^source <> initial}
		modify transition with {^source = initial}
	}
	cfs "Changes the final state to a different one"{
		final = select one FinalState
		transition = select one Transition where {^target is typed FinalState and ^target<>final}
		modify transition with {^target = final}
	}
	cst "Changes the source state of a transition"{
		transition = select one Transition
		state = select one State where {self not typed FinalState and self <> transition->^source}
		modify transition with {^source = state}
	}
	ctt "Changes the target state of a transition"{
		transition = select one Transition
		state = select one State where {self <> transition->^target}
		modify transition with {^target = state}
	}
	cet "Changes the event of a transition"{
		event = select one Trigger
		transition = select one Transition where {triggers <> event}
		modify transition with {triggers = event}
	}
	cat "Changes the action of a transition"{
		transition = select one Transition where {effect <> null}
		action = select one Behavior where {self <> transition->effect}
		modify transition with {effect = action} 
	}
	cios "Changes the operator of Integer comparison: smaller" {
		modify one IntegerComparisonExpression where {
			operator in ['<=' , '==', '!=', '>=', '>'] and 
			operand1 <> null and operand2 <> null
		}
		with {operator = '<'}
	}
	ciose "Changes the operator of Integer comparison: smaller-equal" {
		modify one IntegerComparisonExpression where {
			operator in ['<' , '==', '!=', '>=', '>'] and 
			operand1 <> null and operand2 <> null
		}
		with {operator = '<='}
	}
	cioe "Changes the operator of Integer comparison: equal" {
		modify one IntegerComparisonExpression where {
			operator in ['<' , '<=', '!=', '>=', '>'] and 
			operand1 <> null and operand2 <> null
		}
		with {operator = '=='}
	}
	cione "Changes the operator of Integer comparison: not-equal" {
		modify one IntegerComparisonExpression where {
			operator in ['<' , '<=', '==', '>=', '>'] and 
			operand1 <> null and operand2 <> null
		}
		with {operator = '!='}
	}
	cioge "Changes the operator of Integer comparison: greater-equal" {
		modify one IntegerComparisonExpression where {
			operator in ['<' , '<=', '==', '!=', '>'] and 
			operand1 <> null and operand2 <> null
		}
		with {operator = '>='}
	}
	ciog "Changes the operator of Integer comparison: greater" {
		modify one IntegerComparisonExpression where {
			operator in ['<' , '<=', '==', '!=', '>='] and 
			operand1 <> null and operand2 <> null
		}
		with {operator = '>'}
	}
	cboa "Changes the operator of Boolean Binary comparison: and" {
		modify one BooleanBinaryExpression where {
			operator = '||' and operand1 <> null and operand2 <> null
		}
		with {operator = '&&'}
	}
	cboo "Changes the operator of Boolean Binary comparison: or" {
		modify one BooleanBinaryExpression where {
			operator = '&&' and operand1 <> null and operand2 <> null
		}
		with {operator = '||'}
	}
	cbot "Changes the operator of Boolean Unary comparison: true" {
		modify one BooleanUnaryExpression where {operator = 'True' and operand <> null }
		with {operator = 'False'}
	}
	cbof "Changes the operator of Boolean Unary comparison: false" {
		modify one BooleanUnaryExpression where {operator = 'False' and operand <> null }
		with {operator = 'True'}
	}
	csoe "Changes the operator of String comparison: equals" {
		modify one StringComparisonExpression where {
			operator = '!=' and operand1 <> null and operand2 <> null
		}
		with {operator = '=='}
	}
	csone "Changes the operator of String comparison: not-equals" {
		modify one StringComparisonExpression where {
			operator = '==' and operand1 <> null and operand2 <> null
		}
		with {operator = '!='}
	}
}