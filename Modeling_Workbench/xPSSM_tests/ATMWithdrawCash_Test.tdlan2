Package reactiveATM_testSuite {

	StateMachine ATM (_name = "withdrawCash");
	State getPinState (_name = "getPin");
	FinalState finalState (_name = "FinalState"); 
	
	Signal Card (_name = "Card", attributes = {cardPin, cardBalance});
	IntegerAttribute cardPin (_name="cardPin");
	IntegerAttribute cardBalance (_name="cardBalance");
	
	Signal Pin (_name = "Pin", attributes = enteredPin);
	IntegerAttribute enteredPin (_name = "pin");
	
	Signal Amount (_name = "Amount", attributes = enteredAmount);
	IntegerAttribute enteredAmount (_name = "withdrawAmount");
	
	SignalEventOccurrence signal_occurrence();
	IntegerAttributeValue cardPinValue (attribute = cardPin);
	IntegerAttributeValue cardBalanceValue (attribute = cardBalance);
	IntegerAttributeValue enteredPinValue (attribute = enteredPin);
	IntegerAttributeValue enteredAmountValue (attribute = enteredAmount);
	
	Behavior insertCardMsg (_name = "insertCardMsg");
	Behavior enterPinMsg (_name = "enterPinMsg");
	Behavior wrongPinMsg (_name = "wrongPinMsg");
	Behavior enterAmountMsg (_name = "enterAmountMsg");
	Behavior updateCardBalance (_name = "updateCardBalance");
	Behavior notEnoughMoneyMsg (_name = "notEnoughMoneyMsg");
	Behavior deliverCash (_name = "deliverCash");
	
	Test Description test__wrongPin uses configuration xPSSMConfiguration{
		tester.reactiveGate sends _run (state_machine = ATM) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (
			behavior = insertCardMsg
		) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (
			state_machine = ATM, 
			signal_occurrence = signal_occurrence (
				signal = Card,
				attributeValues = {cardPinValue (value = "1234"), 
					cardBalanceValue (value = "1000")})
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (
			behavior = enterPinMsg
		) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (
			state_machine = ATM, 
			signal_occurrence = signal_occurrence (
				signal = Pin,
				attributeValues = enteredPinValue (value = "1111"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (
			behavior = wrongPinMsg
		) to tester.reactiveGate;
	}
	
	Test Description test_successfulWithdraw uses configuration xPSSMConfiguration{
		tester.reactiveGate sends _run (state_machine = ATM) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = insertCardMsg) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (
			state_machine = ATM, 
			signal_occurrence = signal_occurrence (
				signal = Card,
				attributeValues = {cardPinValue (value = "1234"), cardBalanceValue (value = "1000")})
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = enterPinMsg) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (
			state_machine = ATM, 
			signal_occurrence = signal_occurrence (
				signal = Pin,
				attributeValues = {enteredPinValue (value = "1234")})
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = enterAmountMsg) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (
			state_machine = ATM, 
			signal_occurrence = signal_occurrence (
				signal = Amount,
				attributeValues = {enteredAmountValue (value = "500")})
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = updateCardBalance) to tester.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = deliverCash) to tester.reactiveGate;
	}
	
	Test Description test3_wrongAmount uses configuration xPSSMConfiguration{
		tester.reactiveGate sends _run (state_machine = ATM) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = insertCardMsg) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (
			state_machine = ATM, 
			signal_occurrence = signal_occurrence (
				signal = Card,
				attributeValues = {cardPinValue (value = "1234"), cardBalanceValue (value = "1000")})
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = enterPinMsg) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (
			state_machine = ATM, 
			signal_occurrence = signal_occurrence (
				signal = Pin,
				attributeValues = {enteredPinValue (value = "1234")})
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = enterAmountMsg) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (
			state_machine = ATM, 
			signal_occurrence = signal_occurrence (
				signal = Amount,
				attributeValues = {enteredAmountValue (value = "1500")})
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = notEnoughMoneyMsg) to tester.reactiveGate;
	}
	
	Test Description test4_ocl uses configuration xPSSMConfiguration{
		tester.reactiveGate sends _run (state_machine = ATM) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = insertCardMsg) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (
			state_machine = ATM, 
			signal_occurrence = signal_occurrence (
				signal = Card,
				attributeValues = {cardPinValue (value = "1234"), cardBalanceValue (value = "1000")})
		) to statemachine.reactiveGate;
		tester.oclGate sends oclQuery (query = "self.statemachine.regions -> first().currentVertex") to statemachine.oclGate;
		statemachine.oclGate sends getPinState to tester.oclGate;
	}
	
	Type OCL ( query of type EString ) ;
	OCL oclQuery ( query = ? ) ;
	Type Verdict ;
	Verdict PASS ;
	Verdict FAIL ;
	Verdict INCONCLUSINVE ;
	Type modelExecutionCommand ;
	modelExecutionCommand runModel ;
	modelExecutionCommand runModelAsynchronous ;
	modelExecutionCommand stopModelExecution ;
	modelExecutionCommand resetModel ;
	modelExecutionCommand getModelState ;
	
	Type CustomSystem ( statemachine of type StateMachine , signals of type Signal , operations of type Operation ) ;
	Type Signal extends NamedElement ( attributes of type Attribute ) ;
	Type Operation extends NamedElement ( inParameters of type Attribute , outParameters of type Attribute , return of type Attribute ) ;
	Type EventType ( ) with {
		abstract ;
	} ;
	Type SignalEventType extends EventType ( signal of type Signal ) ;
	Type CallEventType extends EventType ( operation of type Operation ) ;
	Type Attribute extends NamedElement ( ) with {
		abstract ;
	} ;
	Type BooleanAttribute extends Attribute ( ) ;
	Type IntegerAttribute extends Attribute ( ) ;
	Type StringAttribute extends Attribute ( ) ;
	Type Constraint ( ) with {
		abstract ;
	} ;
	Type BooleanConstraint extends Constraint ( attribute of type BooleanAttribute , value of type EBooleanObject ) ;
	Type IntegerConstraint extends Constraint ( attribute of type IntegerAttribute , value of type EIntegerObject ) ;
	Type StringConstraint extends Constraint ( attribute of type StringAttribute , value of type EString ) ;
	Type NamedElement ( _name of type EString ) with {
		abstract ;
	} ;
	Type StateMachine extends NamedElement ( regions of type Region ) ;
	Type Region extends NamedElement ( vertice of type Vertex , transitions of type Transition , stateMachine of type StateMachine , state of type State , currentVertex of type Vertex with { dynamic ;
	} ) ;
	Type Vertex extends NamedElement ( container of type Region , outgoingTransitions of type Transition , incomingTransitions of type Transition ) with {
		abstract ;
	} ;
	Type Pseudostate extends Vertex ( kind of type PseudostateKind , state of type State ) ;
	Type State extends Vertex ( regions of type Region , entry of type Behavior , doActivity of type Behavior , exit of type Behavior , deferrableTriggers of type Trigger , connectionPoint of type Pseudostate ) ;
	Type FinalState extends State ( ) ;
	Type Transition extends NamedElement ( source of type Vertex , target of type Vertex , _triggers of type Trigger , container of type Region , kind of type TransitionKind , effect of type Behavior , constraint of type Constraint ) ;
	Type Trigger extends NamedElement ( eventType of type EventType ) ;
	Type Behavior extends NamedElement ( emittedSignals of type SignalEventOccurrence ) ;
	Type OperationBehavior extends Behavior ( attributeValues of type AttributeValue ) ;
	Type AttributeValue ( ) ;
	Type BooleanAttributeValue extends AttributeValue ( attribute of type BooleanAttribute , value of type EBooleanObject ) ;
	Type IntegerAttributeValue extends AttributeValue ( attribute of type IntegerAttribute , value of type EIntegerObject ) ;
	Type StringAttributeValue extends AttributeValue ( attribute of type StringAttribute , value of type EString ) ;
	Type EventOccurrence ( ) with {
		abstract ;
	} ;
	Type CompletionEventOccurrence ( state of type State ) ;
	Type SignalEventOccurrence extends EventOccurrence ( signal of type Signal , attributeValues of type AttributeValue with { dynamic ;
	} ) ;
	Type CallEventOccurrence extends EventOccurrence ( operation of type Operation , inParameterValues of type AttributeValue with { dynamic ;
	} , outParameterValues of type AttributeValue with { dynamic ; } , returnValue of type AttributeValue with { dynamic ; } ) ;
	Type PseudostateKind ;
	Type TransitionKind ;
	Type BooleanBinaryOperator ;
	Type BooleanUnaryOperator ;
	Type IntegerComparisonOperator ;
	Type StringComparisonOperator ;
	BooleanBinaryOperator AND ;
	BooleanBinaryOperator OR ;
	BooleanUnaryOperator NOT ;
	PseudostateKind initial ;
	PseudostateKind join ;
	PseudostateKind fork ;
	PseudostateKind _terminate ;
	PseudostateKind entrypoint ;
	PseudostateKind exitpoint ;
	StringComparisonOperator _EQUALS ;
	TransitionKind internal ;
	TransitionKind local ;
	TransitionKind external ;
	IntegerComparisonOperator SMALLER ;
	IntegerComparisonOperator SMALLER_EQUALS ;
	IntegerComparisonOperator EQUALS ;
	IntegerComparisonOperator GREATER_EQUALS ;
	IntegerComparisonOperator GREATER ;
	IntegerComparisonOperator NOT_EQUALS ;
	Annotation dynamic ;
	Annotation abstract ;
	Type EByteArray ;
	Type EFloat ;
	Type EBoolean ;
	Type EFeatureMapEntry ;
	Type EResource ;
	Type EBooleanObject ;
	Type EFeatureMap ;
	Type EJavaClass ;
	Type EInvocationTargetException ;
	Type EChar ;
	Type ELongObject ;
	Type EInt ;
	Type EShort ;
	Type EJavaObject ;
	Type EBigDecimal ;
	Type EByte ;
	Type EString ;
	Type ETreeIterator ;
	Type EFloatObject ;
	Type EDate ;
	Type EDoubleObject ;
	Type EIntegerObject ;
	Type EBigInteger ;
	Type EByteObject ;
	Type EShortObject ;
	Type EEList ;
	Type ELong ;
	Type EDiagnosticChain ;
	Type EResourceSet ;
	Type EEnumerator ;
	Type ECharacterObject ;
	Type EDouble ;
	Type EMap ;
	
	Annotation AcceptedEvent ;
	Annotation ExposedEvent ;
	Type _run ( state_machine of type StateMachine ) with {
		AcceptedEvent ;
	} ;
	_run _run ( state_machine = ? ) ;
	Type signal_received ( state_machine of type StateMachine , signal_occurrence of type SignalEventOccurrence ) with {
		AcceptedEvent ;
	} ;
	signal_received signal_received ( state_machine = ? , signal_occurrence = ? ) ;
	Type callOperation_received ( state_machine of type StateMachine , call_occurrence of type CallEventOccurrence ) with {
		AcceptedEvent ;
	} ;
	callOperation_received calloperation_received ( state_machine = ? , call_occurrence = ? ) ;
	Type behavior_executed ( behavior of type Behavior ) with {
		ExposedEvent ;
	} ;
	behavior_executed behavior_executed ( behavior = ? ) ;
	
	Gate Type genericGateType accepts modelExecutionCommand ;
	Gate Type reactiveGateType accepts _run , signal_received , callOperation_received , behavior_executed ;
	Gate Type oclGateType accepts OCL ;
	
	Component Type TestSystem having {
		//gate genericGate of type genericGateType ;
		gate reactiveGate of type reactiveGateType ; 
		gate oclGate of type oclGateType ;
	}
	Component Type MUT having {
		//gate genericGate of type genericGateType ;
		gate reactiveGate of type reactiveGateType ; 
		gate oclGate of type oclGateType ;
	}
	Annotation MUTPath ;
	Annotation DSLName ;
	
	Test Configuration xPSSMConfiguration {
		create Tester tester of type TestSystem ;
		create SUT statemachine of type MUT with { 
			MUTPath : '/ATM.WithdrawCash/model/ATM.withdraw.model' ; 
			DSLName : 'org.imt.pssm.reactive.ReactivePSSM' ;
		} ;
		//connect tester.genericGate to statemachine.genericGate;
		connect tester.oclGate to statemachine.oclGate ;
		connect tester.reactiveGate to statemachine.reactiveGate ;
	}
}