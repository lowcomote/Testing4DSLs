Package JavaThreadLifeCycle_TestData {
	Import all from xPSSMTypes ;
	StateMachine JaveThreadStates ( _name = "JaveThreadStates" ) ;
	Behavior newThreadCreated ( _name = "newThreadCreated" ) ;
	Behavior ThreadIsReady ( _name = "ThreadIsReady" ) ;
	Behavior ThreadIsRunning ( _name = "ThreadIsRunning" ) ;
	Behavior ThreadIsRunnable ( _name = "ThreadIsRunnable" ) ;
	Behavior ThreadIsWaitingByTime ( _name = "ThreadIsWaitingByTime" ) ;
	Behavior ThreadIsWaiting ( _name = "ThreadIsWaiting" ) ;
	Behavior ThreadIsBlocked ( _name = "ThreadIsBlocked" ) ;
	Behavior ThreadIsTerminated ( _name = "ThreadIsTerminated" ) ;
	Signal t_start ( _name = "t.start" ) ;
	SignalEventOccurrence t_start_occurrence ( signal = t_start ) ;
	Signal threadSelected2Run ( _name = "threadSelected2Run" ) ;
	SignalEventOccurrence finishRunnable_occurrence ( signal = finishRunnable ) ;
	Signal finishRunnable ( _name = "finishRunnable" ) ;
	SignalEventOccurrence threadSelected2Run_occurrence ( signal = threadSelected2Run ) ;
	Signal Thread_yield ( _name = "Thread.yield" ) ;
	SignalEventOccurrence Thread_yield_occurrence ( signal = Thread_yield ) ;
	Signal threadSuspended ( _name = "threadSuspended" ) ;
	SignalEventOccurrence threadSuspended_occurrence ( signal = threadSuspended ) ;
	Signal LockSupport_parkNanos__ ( _name = "LockSupport.parkNanos()" ) ;
	SignalEventOccurrence LockSupport_parkNanos___occurrence ( signal = LockSupport_parkNanos__ ) ;
	Signal LockSupport_parkUntil__ ( _name = "LockSupport.parkUntil()" ) ;
	SignalEventOccurrence LockSupport_parkUntil___occurrence ( signal = LockSupport_parkUntil__ ) ;
	Signal o_wait ( _name = "o.wait" ) ;
	SignalEventOccurrence o_wait_occurrence ( signal = o_wait ) ;
	Signal t_join ( _name = "t.join" ) ;
	SignalEventOccurrence t_join_occurrence ( signal = t_join ) ;
	Signal LockSupport_park ( _name = "LockSupport.park" ) ;
	SignalEventOccurrence LockSupport_park_occurrence ( signal = LockSupport_park ) ;
	Signal waitForLockToEnterSynchroBlock ( _name = "waitForLockToEnterSynchroBlock" ) ;
	SignalEventOccurrence waitForLockToEnterSynchroBlock_occurrence ( signal = waitForLockToEnterSynchroBlock ) ;
	Signal waitForLockToReenterSynchroBlock ( _name = "waitForLockToReenterSynchroBlock" ) ;
	SignalEventOccurrence waitForLockToReenterSynchroBlock_occurrence ( signal = waitForLockToReenterSynchroBlock ) ;
	Signal sleepTimeElapsed ( _name = "sleepTimeElapsed" ) ;
	SignalEventOccurrence sleepTimeElapsed_occurrence ( signal = sleepTimeElapsed ) ;
	Signal ThreadTerminated ( _name = "ThreadTerminated" ) ;
	SignalEventOccurrence ThreadTerminated_occurrence ( signal = ThreadTerminated ) ;
	Signal o_notifyAll ( _name = "o.notifyAll" ) ;
	SignalEventOccurrence o_notifyAll_occurrence ( signal = o_notifyAll ) ;
	Signal o_notify ( _name = "o.notify" ) ;
	SignalEventOccurrence o_notify_occurrence ( signal = o_notify ) ;
	Signal monitorLockAcquired ( _name = "monitorLockAcquired" ) ;
	SignalEventOccurrence monitorLockAcquired_occurrence ( signal = monitorLockAcquired ) ;
	IntegerAttribute sleepTime (_name = "sleeptime");
	IntegerAttributeValue sleepTimeValue ( attribute = sleepTime ) ;
	Operation Thread_sleep__ ( _name = "Thread.sleep()" , inParameters = sleepTime);
	CallEventOccurrence Thread_sleep___occurrence ( operation = Thread_sleep__ ) ;
	IntegerAttribute waitTimeout (_name = "waitTimeout");
	IntegerAttributeValue waitTimeoutValue ( attribute = waitTimeout ) ;
	Operation o_wait__ ( _name = "o.wait()" , inParameters = waitTimeout) ;
	CallEventOccurrence o_wait___occurrence ( operation = o_wait__ ) ;
	IntegerAttribute joinTimeout (_name = "joinTimeout");
	IntegerAttributeValue joinTimeoutValue ( attribute = joinTimeout ) ;
	Operation t_join__ ( _name = "t.join()" , inParameters = joinTimeout) ;
	CallEventOccurrence t_join___occurrence ( operation = t_join__ ) ;
}