Package JaveThreadLifeCycle_testSuite {
	Import all from common ;
	Import all from xPSSMTypes;
	Import all from xPSSMEvents;
	Import all from testConfiguration ;
	Import all from JavaThreadLifeCycle_TestData;

	Test Description test1 uses configuration JavaThreadLifeCycleConfiguration{
		tester.reactiveGate sends _run (state_machine = JaveThreadStates) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = newThreadCreated) to tester.reactiveGate;
	}
	Test Description test2 uses configuration JavaThreadLifeCycleConfiguration{
		tester.reactiveGate sends _run (state_machine = JaveThreadStates) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = newThreadCreated) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = t_start_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunnable) to tester.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsReady) to tester.reactiveGate;
	}
	Test Description test3 uses configuration JavaThreadLifeCycleConfiguration{
		tester.reactiveGate sends _run (state_machine = JaveThreadStates) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = newThreadCreated) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = t_start_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunnable) to tester.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsReady) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = threadSelected2Run_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunning) to tester.reactiveGate;
	}
	Test Description test4 uses configuration JavaThreadLifeCycleConfiguration{
		tester.reactiveGate sends _run (state_machine = JaveThreadStates) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = newThreadCreated) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = t_start_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunnable) to tester.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsReady) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = threadSelected2Run_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunning) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = Thread_yield_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsReady) to tester.reactiveGate;
	}
	
	Test Description test5 uses configuration JavaThreadLifeCycleConfiguration{
		tester.reactiveGate sends _run (state_machine = JaveThreadStates) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = newThreadCreated) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = t_start_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunnable) to tester.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsReady) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = threadSelected2Run_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunning) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = threadSuspended_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsReady) to tester.reactiveGate;
	}
	Test Description test6 uses configuration JavaThreadLifeCycleConfiguration{
		tester.reactiveGate sends _run (state_machine = JaveThreadStates) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = newThreadCreated) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = t_start_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunnable) to tester.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsReady) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = threadSelected2Run_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunning) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = finishRunnable_occurrence) to statemachine.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = ThreadTerminated_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsTerminated) to tester.reactiveGate;
	}
	Test Description test7 uses configuration JavaThreadLifeCycleConfiguration{
		tester.reactiveGate sends _run (state_machine = JaveThreadStates) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = newThreadCreated) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = t_start_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunnable) to tester.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsReady) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = threadSelected2Run_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunning) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = finishRunnable_occurrence) to statemachine.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = JaveThreadStates, 
			call_occurrence = Thread_sleep___occurrence (inParameterValues = sleepTimeValue (value = "10"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsWaitingByTime) to tester.reactiveGate;
	}
	Test Description test8 uses configuration JavaThreadLifeCycleConfiguration{
		tester.reactiveGate sends _run (state_machine = JaveThreadStates) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = newThreadCreated) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = t_start_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunnable) to tester.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsReady) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = threadSelected2Run_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunning) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = finishRunnable_occurrence) to statemachine.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = JaveThreadStates, 
			call_occurrence = o_wait___occurrence (inParameterValues = waitTimeoutValue (value = "10"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsWaitingByTime) to tester.reactiveGate;
	}
	Test Description test9 uses configuration JavaThreadLifeCycleConfiguration{
		tester.reactiveGate sends _run (state_machine = JaveThreadStates) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = newThreadCreated) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = t_start_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunnable) to tester.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsReady) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = threadSelected2Run_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunning) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = finishRunnable_occurrence) to statemachine.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = JaveThreadStates, 
			call_occurrence = t_join___occurrence (inParameterValues = joinTimeoutValue (value = "10"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsWaitingByTime) to tester.reactiveGate;
	}
	Test Description test10 uses configuration JavaThreadLifeCycleConfiguration{
		tester.reactiveGate sends _run (state_machine = JaveThreadStates) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = newThreadCreated) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = t_start_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunnable) to tester.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsReady) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = threadSelected2Run_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunning) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = finishRunnable_occurrence) to statemachine.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = LockSupport_parkNanos___occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsWaitingByTime) to tester.reactiveGate;
	}
	Test Description test11 uses configuration JavaThreadLifeCycleConfiguration{
		tester.reactiveGate sends _run (state_machine = JaveThreadStates) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = newThreadCreated) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = t_start_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunnable) to tester.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsReady) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = threadSelected2Run_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunning) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = finishRunnable_occurrence) to statemachine.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = LockSupport_parkUntil___occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsWaitingByTime) to tester.reactiveGate;
	}
	Test Description test12 uses configuration JavaThreadLifeCycleConfiguration{
		tester.reactiveGate sends _run (state_machine = JaveThreadStates) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = newThreadCreated) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = t_start_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunnable) to tester.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsReady) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = threadSelected2Run_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunning) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = finishRunnable_occurrence) to statemachine.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = JaveThreadStates, 
			call_occurrence = Thread_sleep___occurrence (inParameterValues = sleepTimeValue (value = "10"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsWaitingByTime) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = sleepTimeElapsed_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunnable) to tester.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsReady) to tester.reactiveGate;
	}
	Test Description test13 uses configuration JavaThreadLifeCycleConfiguration{
		tester.reactiveGate sends _run (state_machine = JaveThreadStates) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = newThreadCreated) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = t_start_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunnable) to tester.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsReady) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = threadSelected2Run_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunning) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = finishRunnable_occurrence) to statemachine.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = JaveThreadStates, 
			call_occurrence = o_wait___occurrence (inParameterValues = waitTimeoutValue (value = "10"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsWaitingByTime) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = sleepTimeElapsed_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunnable) to tester.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsReady) to tester.reactiveGate;
	}
	Test Description test14 uses configuration JavaThreadLifeCycleConfiguration{
		tester.reactiveGate sends _run (state_machine = JaveThreadStates) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = newThreadCreated) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = t_start_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunnable) to tester.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsReady) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = threadSelected2Run_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunning) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = finishRunnable_occurrence) to statemachine.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = JaveThreadStates, 
			call_occurrence = t_join___occurrence (inParameterValues = joinTimeoutValue (value = "10"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsWaitingByTime) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = sleepTimeElapsed_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunnable) to tester.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsReady) to tester.reactiveGate;
	}
	Test Description test15 uses configuration JavaThreadLifeCycleConfiguration{
		tester.reactiveGate sends _run (state_machine = JaveThreadStates) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = newThreadCreated) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = t_start_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunnable) to tester.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsReady) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = threadSelected2Run_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunning) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = finishRunnable_occurrence) to statemachine.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, 
			signal_occurrence = LockSupport_parkNanos___occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsWaitingByTime) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = sleepTimeElapsed_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunnable) to tester.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsReady) to tester.reactiveGate;
	}
	Test Description test16 uses configuration JavaThreadLifeCycleConfiguration{
		tester.reactiveGate sends _run (state_machine = JaveThreadStates) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = newThreadCreated) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = t_start_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunnable) to tester.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsReady) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = threadSelected2Run_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunning) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = finishRunnable_occurrence) to statemachine.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, 
			signal_occurrence = LockSupport_parkUntil___occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsWaitingByTime) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = sleepTimeElapsed_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunnable) to tester.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsReady) to tester.reactiveGate;
	}
	Test Description test17 uses configuration JavaThreadLifeCycleConfiguration{
		tester.reactiveGate sends _run (state_machine = JaveThreadStates) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = newThreadCreated) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = t_start_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunnable) to tester.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsReady) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = threadSelected2Run_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunning) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = finishRunnable_occurrence) to statemachine.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = JaveThreadStates, 
			call_occurrence = Thread_sleep___occurrence (inParameterValues = sleepTimeValue (value = "10"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsWaitingByTime) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = ThreadTerminated_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsTerminated) to tester.reactiveGate;
	}
	Test Description test18 uses configuration JavaThreadLifeCycleConfiguration{
		tester.reactiveGate sends _run (state_machine = JaveThreadStates) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = newThreadCreated) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = t_start_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunnable) to tester.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsReady) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = threadSelected2Run_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunning) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = finishRunnable_occurrence) to statemachine.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = JaveThreadStates, 
			call_occurrence = o_wait___occurrence (inParameterValues = waitTimeoutValue (value = "10"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsWaitingByTime) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = ThreadTerminated_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsTerminated) to tester.reactiveGate;
	}
	Test Description test19 uses configuration JavaThreadLifeCycleConfiguration{
		tester.reactiveGate sends _run (state_machine = JaveThreadStates) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = newThreadCreated) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = t_start_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunnable) to tester.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsReady) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = threadSelected2Run_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunning) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = finishRunnable_occurrence) to statemachine.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = JaveThreadStates, 
			call_occurrence = t_join___occurrence (inParameterValues = joinTimeoutValue (value = "10"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsWaitingByTime) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = ThreadTerminated_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsTerminated) to tester.reactiveGate;
	}
	Test Description test20 uses configuration JavaThreadLifeCycleConfiguration{
		tester.reactiveGate sends _run (state_machine = JaveThreadStates) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = newThreadCreated) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = t_start_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunnable) to tester.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsReady) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = threadSelected2Run_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunning) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = finishRunnable_occurrence) to statemachine.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, 
			signal_occurrence = LockSupport_parkNanos___occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsWaitingByTime) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = ThreadTerminated_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsTerminated) to tester.reactiveGate;
	}
	Test Description test21 uses configuration JavaThreadLifeCycleConfiguration{
		tester.reactiveGate sends _run (state_machine = JaveThreadStates) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = newThreadCreated) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = t_start_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunnable) to tester.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsReady) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = threadSelected2Run_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunning) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = finishRunnable_occurrence) to statemachine.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, 
			signal_occurrence = LockSupport_parkUntil___occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsWaitingByTime) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = ThreadTerminated_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsTerminated) to tester.reactiveGate;
	}
	Test Description test22 uses configuration JavaThreadLifeCycleConfiguration{
		tester.reactiveGate sends _run (state_machine = JaveThreadStates) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = newThreadCreated) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = t_start_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunnable) to tester.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsReady) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = threadSelected2Run_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunning) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = finishRunnable_occurrence) to statemachine.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = JaveThreadStates, 
			call_occurrence = Thread_sleep___occurrence (inParameterValues = sleepTimeValue (value = "10"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsWaitingByTime) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = o_notifyAll_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsBlocked) to tester.reactiveGate;
	}
	Test Description test23 uses configuration JavaThreadLifeCycleConfiguration{
		tester.reactiveGate sends _run (state_machine = JaveThreadStates) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = newThreadCreated) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = t_start_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunnable) to tester.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsReady) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = threadSelected2Run_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunning) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = finishRunnable_occurrence) to statemachine.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = JaveThreadStates, 
			call_occurrence = o_wait___occurrence (inParameterValues = waitTimeoutValue (value = "10"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsWaitingByTime) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = o_notifyAll_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsBlocked) to tester.reactiveGate;
	}
	Test Description test24 uses configuration JavaThreadLifeCycleConfiguration{
		tester.reactiveGate sends _run (state_machine = JaveThreadStates) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = newThreadCreated) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = t_start_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunnable) to tester.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsReady) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = threadSelected2Run_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunning) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = finishRunnable_occurrence) to statemachine.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = JaveThreadStates, 
			call_occurrence = t_join___occurrence (inParameterValues = joinTimeoutValue (value = "10"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsWaitingByTime) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = o_notifyAll_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsBlocked) to tester.reactiveGate;
	}
	Test Description test25 uses configuration JavaThreadLifeCycleConfiguration{
		tester.reactiveGate sends _run (state_machine = JaveThreadStates) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = newThreadCreated) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = t_start_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunnable) to tester.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsReady) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = threadSelected2Run_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunning) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = finishRunnable_occurrence) to statemachine.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, 
			signal_occurrence = LockSupport_parkNanos___occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsWaitingByTime) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = o_notifyAll_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsBlocked) to tester.reactiveGate;
	}
	Test Description test26 uses configuration JavaThreadLifeCycleConfiguration{
		tester.reactiveGate sends _run (state_machine = JaveThreadStates) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = newThreadCreated) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = t_start_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunnable) to tester.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsReady) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = threadSelected2Run_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunning) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = finishRunnable_occurrence) to statemachine.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, 
			signal_occurrence = LockSupport_parkUntil___occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsWaitingByTime) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = o_notifyAll_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsBlocked) to tester.reactiveGate;
	}
	Test Description test27 uses configuration JavaThreadLifeCycleConfiguration{
		tester.reactiveGate sends _run (state_machine = JaveThreadStates) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = newThreadCreated) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = t_start_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunnable) to tester.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsReady) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = threadSelected2Run_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunning) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = finishRunnable_occurrence) to statemachine.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = JaveThreadStates, 
			call_occurrence = Thread_sleep___occurrence (inParameterValues = sleepTimeValue (value = "10"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsWaitingByTime) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = o_notify_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsBlocked) to tester.reactiveGate;
	}
	Test Description test28 uses configuration JavaThreadLifeCycleConfiguration{
		tester.reactiveGate sends _run (state_machine = JaveThreadStates) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = newThreadCreated) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = t_start_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunnable) to tester.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsReady) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = threadSelected2Run_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunning) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = finishRunnable_occurrence) to statemachine.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = JaveThreadStates, 
			call_occurrence = o_wait___occurrence (inParameterValues = waitTimeoutValue (value = "10"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsWaitingByTime) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = o_notify_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsBlocked) to tester.reactiveGate;
	}
	Test Description test29 uses configuration JavaThreadLifeCycleConfiguration{
		tester.reactiveGate sends _run (state_machine = JaveThreadStates) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = newThreadCreated) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = t_start_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunnable) to tester.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsReady) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = threadSelected2Run_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunning) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = finishRunnable_occurrence) to statemachine.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = JaveThreadStates, 
			call_occurrence = t_join___occurrence (inParameterValues = joinTimeoutValue (value = "10"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsWaitingByTime) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = o_notify_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsBlocked) to tester.reactiveGate;
	}
	Test Description test30 uses configuration JavaThreadLifeCycleConfiguration{
		tester.reactiveGate sends _run (state_machine = JaveThreadStates) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = newThreadCreated) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = t_start_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunnable) to tester.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsReady) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = threadSelected2Run_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunning) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = finishRunnable_occurrence) to statemachine.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, 
			signal_occurrence = LockSupport_parkNanos___occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsWaitingByTime) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = o_notify_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsBlocked) to tester.reactiveGate;
	}
	Test Description test31 uses configuration JavaThreadLifeCycleConfiguration{
		tester.reactiveGate sends _run (state_machine = JaveThreadStates) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = newThreadCreated) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = t_start_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunnable) to tester.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsReady) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = threadSelected2Run_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunning) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = finishRunnable_occurrence) to statemachine.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, 
			signal_occurrence = LockSupport_parkUntil___occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsWaitingByTime) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = o_notify_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsBlocked) to tester.reactiveGate;
	}
	Test Description test32 uses configuration JavaThreadLifeCycleConfiguration{
		tester.reactiveGate sends _run (state_machine = JaveThreadStates) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = newThreadCreated) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = t_start_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunnable) to tester.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsReady) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = threadSelected2Run_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunning) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = finishRunnable_occurrence) to statemachine.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = o_wait_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsWaiting) to tester.reactiveGate;
	}
	Test Description test33 uses configuration JavaThreadLifeCycleConfiguration{
		tester.reactiveGate sends _run (state_machine = JaveThreadStates) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = newThreadCreated) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = t_start_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunnable) to tester.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsReady) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = threadSelected2Run_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunning) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = finishRunnable_occurrence) to statemachine.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = t_join_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsWaiting) to tester.reactiveGate;
	}
	Test Description test34 uses configuration JavaThreadLifeCycleConfiguration{
		tester.reactiveGate sends _run (state_machine = JaveThreadStates) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = newThreadCreated) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = t_start_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunnable) to tester.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsReady) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = threadSelected2Run_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunning) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = finishRunnable_occurrence) to statemachine.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = LockSupport_park_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsWaiting) to tester.reactiveGate;
	}
	Test Description test35 uses configuration JavaThreadLifeCycleConfiguration{
		tester.reactiveGate sends _run (state_machine = JaveThreadStates) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = newThreadCreated) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = t_start_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunnable) to tester.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsReady) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = threadSelected2Run_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunning) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = finishRunnable_occurrence) to statemachine.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = o_wait_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsWaiting) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = ThreadTerminated_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsTerminated) to tester.reactiveGate;
	}
	Test Description test36 uses configuration JavaThreadLifeCycleConfiguration{
		tester.reactiveGate sends _run (state_machine = JaveThreadStates) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = newThreadCreated) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = t_start_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunnable) to tester.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsReady) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = threadSelected2Run_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunning) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = finishRunnable_occurrence) to statemachine.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = t_join_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsWaiting) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = ThreadTerminated_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsTerminated) to tester.reactiveGate;
	}
	Test Description test37 uses configuration JavaThreadLifeCycleConfiguration{
		tester.reactiveGate sends _run (state_machine = JaveThreadStates) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = newThreadCreated) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = t_start_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunnable) to tester.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsReady) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = threadSelected2Run_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunning) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = finishRunnable_occurrence) to statemachine.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = LockSupport_park_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsWaiting) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = ThreadTerminated_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsTerminated) to tester.reactiveGate;
	}
	Test Description test38 uses configuration JavaThreadLifeCycleConfiguration{
		tester.reactiveGate sends _run (state_machine = JaveThreadStates) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = newThreadCreated) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = t_start_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunnable) to tester.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsReady) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = threadSelected2Run_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunning) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = finishRunnable_occurrence) to statemachine.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = o_wait_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsWaiting) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = o_notifyAll_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsBlocked) to tester.reactiveGate;
	}
	Test Description test39 uses configuration JavaThreadLifeCycleConfiguration{
		tester.reactiveGate sends _run (state_machine = JaveThreadStates) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = newThreadCreated) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = t_start_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunnable) to tester.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsReady) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = threadSelected2Run_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunning) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = finishRunnable_occurrence) to statemachine.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = t_join_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsWaiting) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = o_notifyAll_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsBlocked) to tester.reactiveGate;
	}
	Test Description test40 uses configuration JavaThreadLifeCycleConfiguration{
		tester.reactiveGate sends _run (state_machine = JaveThreadStates) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = newThreadCreated) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = t_start_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunnable) to tester.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsReady) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = threadSelected2Run_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunning) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = finishRunnable_occurrence) to statemachine.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = LockSupport_park_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsWaiting) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = o_notifyAll_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsBlocked) to tester.reactiveGate;
	}
	Test Description test41 uses configuration JavaThreadLifeCycleConfiguration{
		tester.reactiveGate sends _run (state_machine = JaveThreadStates) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = newThreadCreated) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = t_start_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunnable) to tester.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsReady) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = threadSelected2Run_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunning) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = finishRunnable_occurrence) to statemachine.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = o_wait_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsWaiting) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = o_notify_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsBlocked) to tester.reactiveGate;
	}
	Test Description test42 uses configuration JavaThreadLifeCycleConfiguration{
		tester.reactiveGate sends _run (state_machine = JaveThreadStates) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = newThreadCreated) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = t_start_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunnable) to tester.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsReady) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = threadSelected2Run_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunning) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = finishRunnable_occurrence) to statemachine.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = t_join_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsWaiting) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = o_notify_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsBlocked) to tester.reactiveGate;
	}
	Test Description test43 uses configuration JavaThreadLifeCycleConfiguration{
		tester.reactiveGate sends _run (state_machine = JaveThreadStates) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = newThreadCreated) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = t_start_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunnable) to tester.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsReady) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = threadSelected2Run_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunning) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = finishRunnable_occurrence) to statemachine.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = LockSupport_park_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsWaiting) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = o_notify_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsBlocked) to tester.reactiveGate;
	}
	Test Description test44 uses configuration JavaThreadLifeCycleConfiguration{
		tester.reactiveGate sends _run (state_machine = JaveThreadStates) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = newThreadCreated) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = t_start_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunnable) to tester.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsReady) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = threadSelected2Run_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunning) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = finishRunnable_occurrence) to statemachine.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = waitForLockToEnterSynchroBlock_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsBlocked) to tester.reactiveGate;
	}
	Test Description test45 uses configuration JavaThreadLifeCycleConfiguration{
		tester.reactiveGate sends _run (state_machine = JaveThreadStates) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = newThreadCreated) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = t_start_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunnable) to tester.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsReady) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = threadSelected2Run_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunning) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = finishRunnable_occurrence) to statemachine.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = waitForLockToReenterSynchroBlock_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsBlocked) to tester.reactiveGate;
	}
	Test Description test46 uses configuration JavaThreadLifeCycleConfiguration{
		tester.reactiveGate sends _run (state_machine = JaveThreadStates) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = newThreadCreated) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = t_start_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunnable) to tester.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsReady) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = threadSelected2Run_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunning) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = finishRunnable_occurrence) to statemachine.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = waitForLockToEnterSynchroBlock_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsBlocked) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = monitorLockAcquired_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunnable) to tester.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsReady) to tester.reactiveGate;
	}
	Test Description test47 uses configuration JavaThreadLifeCycleConfiguration{
		tester.reactiveGate sends _run (state_machine = JaveThreadStates) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = newThreadCreated) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = t_start_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunnable) to tester.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsReady) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = threadSelected2Run_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunning) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = finishRunnable_occurrence) to statemachine.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = waitForLockToReenterSynchroBlock_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsBlocked) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = ThreadTerminated_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsTerminated) to tester.reactiveGate;
	}
	Test Description test48 uses configuration JavaThreadLifeCycleConfiguration{
		tester.reactiveGate sends _run (state_machine = JaveThreadStates) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = newThreadCreated) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = t_start_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunnable) to tester.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsReady) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = threadSelected2Run_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunning) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = finishRunnable_occurrence) to statemachine.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = waitForLockToEnterSynchroBlock_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsBlocked) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = monitorLockAcquired_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunnable) to tester.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsReady) to tester.reactiveGate;
	}
	Test Description test49 uses configuration JavaThreadLifeCycleConfiguration{
		tester.reactiveGate sends _run (state_machine = JaveThreadStates) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = newThreadCreated) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = t_start_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunnable) to tester.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsReady) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = threadSelected2Run_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunning) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = finishRunnable_occurrence) to statemachine.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = waitForLockToReenterSynchroBlock_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsBlocked) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = ThreadTerminated_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsTerminated) to tester.reactiveGate;
	}
	Test Description test50 uses configuration JavaThreadLifeCycleConfiguration{
		tester.reactiveGate sends _run (state_machine = JaveThreadStates) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = newThreadCreated) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = t_start_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunnable) to tester.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsReady) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = threadSelected2Run_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunning) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = finishRunnable_occurrence) to statemachine.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = JaveThreadStates, 
			call_occurrence = Thread_sleep___occurrence (inParameterValues = sleepTimeValue (value = "10"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsWaitingByTime) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = o_notifyAll_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsBlocked) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = monitorLockAcquired_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunnable) to tester.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsReady) to tester.reactiveGate;
	}
	Test Description test51 uses configuration JavaThreadLifeCycleConfiguration{
		tester.reactiveGate sends _run (state_machine = JaveThreadStates) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = newThreadCreated) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = t_start_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunnable) to tester.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsReady) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = threadSelected2Run_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunning) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = finishRunnable_occurrence) to statemachine.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = JaveThreadStates, 
			call_occurrence = o_wait___occurrence (inParameterValues = waitTimeoutValue (value = "10"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsWaitingByTime) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = o_notifyAll_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsBlocked) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = monitorLockAcquired_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunnable) to tester.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsReady) to tester.reactiveGate;
	}
	Test Description test52 uses configuration JavaThreadLifeCycleConfiguration{
		tester.reactiveGate sends _run (state_machine = JaveThreadStates) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = newThreadCreated) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = t_start_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunnable) to tester.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsReady) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = threadSelected2Run_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunning) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = finishRunnable_occurrence) to statemachine.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = JaveThreadStates, 
			call_occurrence = t_join___occurrence (inParameterValues = joinTimeoutValue (value = "10"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsWaitingByTime) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = o_notifyAll_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsBlocked) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = monitorLockAcquired_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunnable) to tester.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsReady) to tester.reactiveGate;
	}
	Test Description test53 uses configuration JavaThreadLifeCycleConfiguration{
		tester.reactiveGate sends _run (state_machine = JaveThreadStates) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = newThreadCreated) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = t_start_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunnable) to tester.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsReady) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = threadSelected2Run_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunning) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = finishRunnable_occurrence) to statemachine.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, 
			signal_occurrence = LockSupport_parkNanos___occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsWaitingByTime) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = o_notifyAll_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsBlocked) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = monitorLockAcquired_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunnable) to tester.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsReady) to tester.reactiveGate;
	}
	Test Description test54 uses configuration JavaThreadLifeCycleConfiguration{
		tester.reactiveGate sends _run (state_machine = JaveThreadStates) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = newThreadCreated) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = t_start_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunnable) to tester.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsReady) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = threadSelected2Run_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunning) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = finishRunnable_occurrence) to statemachine.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, 
			signal_occurrence = LockSupport_parkUntil___occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsWaitingByTime) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = o_notifyAll_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsBlocked) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = monitorLockAcquired_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunnable) to tester.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsReady) to tester.reactiveGate;
	}
	Test Description test55 uses configuration JavaThreadLifeCycleConfiguration{
		tester.reactiveGate sends _run (state_machine = JaveThreadStates) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = newThreadCreated) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = t_start_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunnable) to tester.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsReady) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = threadSelected2Run_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunning) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = finishRunnable_occurrence) to statemachine.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = JaveThreadStates, 
			call_occurrence = Thread_sleep___occurrence (inParameterValues = sleepTimeValue (value = "10"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsWaitingByTime) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = o_notify_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsBlocked) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = monitorLockAcquired_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunnable) to tester.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsReady) to tester.reactiveGate;
	}
	Test Description test56 uses configuration JavaThreadLifeCycleConfiguration{
		tester.reactiveGate sends _run (state_machine = JaveThreadStates) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = newThreadCreated) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = t_start_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunnable) to tester.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsReady) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = threadSelected2Run_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunning) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = finishRunnable_occurrence) to statemachine.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = JaveThreadStates, 
			call_occurrence = o_wait___occurrence (inParameterValues = waitTimeoutValue (value = "10"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsWaitingByTime) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = o_notify_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsBlocked) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = monitorLockAcquired_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunnable) to tester.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsReady) to tester.reactiveGate;
	}
	Test Description test57 uses configuration JavaThreadLifeCycleConfiguration{
		tester.reactiveGate sends _run (state_machine = JaveThreadStates) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = newThreadCreated) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = t_start_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunnable) to tester.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsReady) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = threadSelected2Run_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunning) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = finishRunnable_occurrence) to statemachine.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = JaveThreadStates, 
			call_occurrence = t_join___occurrence (inParameterValues = joinTimeoutValue (value = "10"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsWaitingByTime) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = o_notify_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsBlocked) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = monitorLockAcquired_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunnable) to tester.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsReady) to tester.reactiveGate;
	}
	Test Description test58 uses configuration JavaThreadLifeCycleConfiguration{
		tester.reactiveGate sends _run (state_machine = JaveThreadStates) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = newThreadCreated) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = t_start_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunnable) to tester.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsReady) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = threadSelected2Run_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunning) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = finishRunnable_occurrence) to statemachine.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, 
			signal_occurrence = LockSupport_parkNanos___occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsWaitingByTime) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = o_notify_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsBlocked) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = monitorLockAcquired_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunnable) to tester.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsReady) to tester.reactiveGate;
	}
	Test Description test59 uses configuration JavaThreadLifeCycleConfiguration{
		tester.reactiveGate sends _run (state_machine = JaveThreadStates) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = newThreadCreated) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = t_start_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunnable) to tester.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsReady) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = threadSelected2Run_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunning) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = finishRunnable_occurrence) to statemachine.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, 
			signal_occurrence = LockSupport_parkUntil___occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsWaitingByTime) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = o_notify_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsBlocked) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = monitorLockAcquired_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunnable) to tester.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsReady) to tester.reactiveGate;
	}
	Test Description test60 uses configuration JavaThreadLifeCycleConfiguration{
		tester.reactiveGate sends _run (state_machine = JaveThreadStates) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = newThreadCreated) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = t_start_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunnable) to tester.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsReady) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = threadSelected2Run_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunning) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = finishRunnable_occurrence) to statemachine.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = JaveThreadStates, 
			call_occurrence = Thread_sleep___occurrence (inParameterValues = sleepTimeValue (value = "10"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsWaitingByTime) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = o_notifyAll_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsBlocked) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = ThreadTerminated_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsTerminated) to tester.reactiveGate;
	}
	Test Description test61 uses configuration JavaThreadLifeCycleConfiguration{
		tester.reactiveGate sends _run (state_machine = JaveThreadStates) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = newThreadCreated) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = t_start_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunnable) to tester.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsReady) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = threadSelected2Run_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunning) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = finishRunnable_occurrence) to statemachine.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = JaveThreadStates, 
			call_occurrence = o_wait___occurrence (inParameterValues = waitTimeoutValue (value = "10"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsWaitingByTime) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = o_notifyAll_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsBlocked) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = ThreadTerminated_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsTerminated) to tester.reactiveGate;
	}
	Test Description test62 uses configuration JavaThreadLifeCycleConfiguration{
		tester.reactiveGate sends _run (state_machine = JaveThreadStates) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = newThreadCreated) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = t_start_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunnable) to tester.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsReady) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = threadSelected2Run_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunning) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = finishRunnable_occurrence) to statemachine.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = JaveThreadStates, 
			call_occurrence = t_join___occurrence (inParameterValues = joinTimeoutValue (value = "10"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsWaitingByTime) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = o_notifyAll_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsBlocked) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = ThreadTerminated_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsTerminated) to tester.reactiveGate;
	}
	Test Description test63 uses configuration JavaThreadLifeCycleConfiguration{
		tester.reactiveGate sends _run (state_machine = JaveThreadStates) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = newThreadCreated) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = t_start_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunnable) to tester.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsReady) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = threadSelected2Run_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunning) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = finishRunnable_occurrence) to statemachine.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, 
			signal_occurrence = LockSupport_parkNanos___occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsWaitingByTime) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = o_notifyAll_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsBlocked) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = ThreadTerminated_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsTerminated) to tester.reactiveGate;
	}
	Test Description test64 uses configuration JavaThreadLifeCycleConfiguration{
		tester.reactiveGate sends _run (state_machine = JaveThreadStates) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = newThreadCreated) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = t_start_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunnable) to tester.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsReady) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = threadSelected2Run_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunning) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = finishRunnable_occurrence) to statemachine.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, 
			signal_occurrence = LockSupport_parkUntil___occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsWaitingByTime) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = o_notifyAll_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsBlocked) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = ThreadTerminated_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsTerminated) to tester.reactiveGate;
	}
	Test Description test65 uses configuration JavaThreadLifeCycleConfiguration{
		tester.reactiveGate sends _run (state_machine = JaveThreadStates) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = newThreadCreated) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = t_start_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunnable) to tester.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsReady) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = threadSelected2Run_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunning) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = finishRunnable_occurrence) to statemachine.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = JaveThreadStates, 
			call_occurrence = Thread_sleep___occurrence (inParameterValues = sleepTimeValue (value = "10"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsWaitingByTime) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = o_notify_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsBlocked) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = ThreadTerminated_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsTerminated) to tester.reactiveGate;
	}
	Test Description test66 uses configuration JavaThreadLifeCycleConfiguration{
		tester.reactiveGate sends _run (state_machine = JaveThreadStates) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = newThreadCreated) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = t_start_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunnable) to tester.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsReady) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = threadSelected2Run_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunning) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = finishRunnable_occurrence) to statemachine.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = JaveThreadStates, 
			call_occurrence = o_wait___occurrence (inParameterValues = waitTimeoutValue (value = "10"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsWaitingByTime) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = o_notify_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsBlocked) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = ThreadTerminated_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsTerminated) to tester.reactiveGate;
	}
	Test Description test67 uses configuration JavaThreadLifeCycleConfiguration{
		tester.reactiveGate sends _run (state_machine = JaveThreadStates) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = newThreadCreated) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = t_start_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunnable) to tester.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsReady) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = threadSelected2Run_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunning) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = finishRunnable_occurrence) to statemachine.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = JaveThreadStates, 
			call_occurrence = t_join___occurrence (inParameterValues = joinTimeoutValue (value = "10"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsWaitingByTime) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = o_notify_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsBlocked) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = ThreadTerminated_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsTerminated) to tester.reactiveGate;
	}
	Test Description test68 uses configuration JavaThreadLifeCycleConfiguration{
		tester.reactiveGate sends _run (state_machine = JaveThreadStates) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = newThreadCreated) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = t_start_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunnable) to tester.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsReady) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = threadSelected2Run_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunning) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = finishRunnable_occurrence) to statemachine.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, 
			signal_occurrence = LockSupport_parkNanos___occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsWaitingByTime) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = o_notify_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsBlocked) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = ThreadTerminated_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsTerminated) to tester.reactiveGate;
	}
	Test Description test69 uses configuration JavaThreadLifeCycleConfiguration{
		tester.reactiveGate sends _run (state_machine = JaveThreadStates) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = newThreadCreated) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = t_start_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunnable) to tester.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsReady) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = threadSelected2Run_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunning) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = finishRunnable_occurrence) to statemachine.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, 
			signal_occurrence = LockSupport_parkUntil___occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsWaitingByTime) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = o_notify_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsBlocked) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = ThreadTerminated_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsTerminated) to tester.reactiveGate;
	}
	Test Description test70 uses configuration JavaThreadLifeCycleConfiguration{
		tester.reactiveGate sends _run (state_machine = JaveThreadStates) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = newThreadCreated) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = t_start_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunnable) to tester.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsReady) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = threadSelected2Run_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunning) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = finishRunnable_occurrence) to statemachine.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = o_wait_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsWaiting) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = o_notifyAll_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsBlocked) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = monitorLockAcquired_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunnable) to tester.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsReady) to tester.reactiveGate;
	}
	Test Description test71 uses configuration JavaThreadLifeCycleConfiguration{
		tester.reactiveGate sends _run (state_machine = JaveThreadStates) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = newThreadCreated) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = t_start_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunnable) to tester.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsReady) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = threadSelected2Run_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunning) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = finishRunnable_occurrence) to statemachine.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = t_join_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsWaiting) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = o_notifyAll_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsBlocked) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = monitorLockAcquired_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunnable) to tester.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsReady) to tester.reactiveGate;
	}
	Test Description test72 uses configuration JavaThreadLifeCycleConfiguration{
		tester.reactiveGate sends _run (state_machine = JaveThreadStates) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = newThreadCreated) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = t_start_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunnable) to tester.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsReady) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = threadSelected2Run_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunning) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = finishRunnable_occurrence) to statemachine.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = LockSupport_park_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsWaiting) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = o_notifyAll_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsBlocked) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = monitorLockAcquired_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunnable) to tester.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsReady) to tester.reactiveGate;
	}
	Test Description test73 uses configuration JavaThreadLifeCycleConfiguration{
		tester.reactiveGate sends _run (state_machine = JaveThreadStates) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = newThreadCreated) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = t_start_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunnable) to tester.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsReady) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = threadSelected2Run_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunning) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = finishRunnable_occurrence) to statemachine.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = o_wait_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsWaiting) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = o_notify_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsBlocked) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = monitorLockAcquired_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunnable) to tester.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsReady) to tester.reactiveGate;
	}
	Test Description test74 uses configuration JavaThreadLifeCycleConfiguration{
		tester.reactiveGate sends _run (state_machine = JaveThreadStates) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = newThreadCreated) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = t_start_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunnable) to tester.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsReady) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = threadSelected2Run_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunning) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = finishRunnable_occurrence) to statemachine.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = t_join_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsWaiting) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = o_notify_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsBlocked) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = monitorLockAcquired_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunnable) to tester.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsReady) to tester.reactiveGate;
	}
	Test Description test75 uses configuration JavaThreadLifeCycleConfiguration{
		tester.reactiveGate sends _run (state_machine = JaveThreadStates) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = newThreadCreated) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = t_start_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunnable) to tester.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsReady) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = threadSelected2Run_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunning) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = finishRunnable_occurrence) to statemachine.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = LockSupport_park_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsWaiting) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = o_notify_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsBlocked) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = monitorLockAcquired_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunnable) to tester.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsReady) to tester.reactiveGate;
	}
	Test Description test76 uses configuration JavaThreadLifeCycleConfiguration{
		tester.reactiveGate sends _run (state_machine = JaveThreadStates) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = newThreadCreated) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = t_start_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunnable) to tester.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsReady) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = threadSelected2Run_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunning) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = finishRunnable_occurrence) to statemachine.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = o_wait_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsWaiting) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = o_notifyAll_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsBlocked) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = ThreadTerminated_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsTerminated) to tester.reactiveGate;
	}
	Test Description test77 uses configuration JavaThreadLifeCycleConfiguration{
		tester.reactiveGate sends _run (state_machine = JaveThreadStates) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = newThreadCreated) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = t_start_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunnable) to tester.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsReady) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = threadSelected2Run_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunning) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = finishRunnable_occurrence) to statemachine.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = t_join_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsWaiting) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = o_notifyAll_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsBlocked) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = ThreadTerminated_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsTerminated) to tester.reactiveGate;
	}
	Test Description test78 uses configuration JavaThreadLifeCycleConfiguration{
		tester.reactiveGate sends _run (state_machine = JaveThreadStates) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = newThreadCreated) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = t_start_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunnable) to tester.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsReady) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = threadSelected2Run_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunning) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = finishRunnable_occurrence) to statemachine.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = LockSupport_park_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsWaiting) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = o_notifyAll_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsBlocked) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = ThreadTerminated_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsTerminated) to tester.reactiveGate;
	}
	Test Description test79 uses configuration JavaThreadLifeCycleConfiguration{
		tester.reactiveGate sends _run (state_machine = JaveThreadStates) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = newThreadCreated) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = t_start_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunnable) to tester.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsReady) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = threadSelected2Run_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunning) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = finishRunnable_occurrence) to statemachine.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = o_wait_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsWaiting) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = o_notify_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsBlocked) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = ThreadTerminated_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsTerminated) to tester.reactiveGate;
	}
	Test Description test80 uses configuration JavaThreadLifeCycleConfiguration{
		tester.reactiveGate sends _run (state_machine = JaveThreadStates) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = newThreadCreated) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = t_start_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunnable) to tester.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsReady) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = threadSelected2Run_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunning) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = finishRunnable_occurrence) to statemachine.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = t_join_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsWaiting) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = o_notify_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsBlocked) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = ThreadTerminated_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsTerminated) to tester.reactiveGate;
	}
	Test Description test81 uses configuration JavaThreadLifeCycleConfiguration{
		tester.reactiveGate sends _run (state_machine = JaveThreadStates) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = newThreadCreated) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = t_start_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunnable) to tester.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsReady) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = threadSelected2Run_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsRunning) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = finishRunnable_occurrence) to statemachine.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = LockSupport_park_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsWaiting) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = o_notify_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsBlocked) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (state_machine = JaveThreadStates, signal_occurrence = ThreadTerminated_occurrence) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = ThreadIsTerminated) to tester.reactiveGate;
	}
}