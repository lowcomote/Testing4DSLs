-- @nsURI Ecore=http://www.eclipse.org/emf/2002/Ecore
-- @path TDL=/org.etsi.mts.tdl.model/model/tdl.ecore

module ecore2tdl;
create OUT : TDL from IN : Ecore;

helper def: tokenNames: Sequence(String) = Sequence {
	'Package', '{', '}', 'with', 'perform', 'action', '(', ',', ')', 'on', 'test', 'objectives', ':', ';', 'name', 'time', 'label', 'constraints', 'Action', 'alternatively', 'or', 'Annotation', '*', '?', '=', 'assert', 'otherwise', 'set', 'verdict', 'to', '->', '[', ']', 'times', 'repeat', 'break', 'Note', 'create', 'of', 'type', 'bind', 'Component', 'Type', 'having', 'if', 'else', 'connect', 'as', 'Map', 'in', '.', 'new', 'containing', 'Use', 'Signature', 'Collection', 'default', '+', '-', '/', 'mod', '>', '<', '>=', '<=', '==', '!=', 'and', 'xor', 'not', 'size', 'Import', 'all', 'from', 'Function', 'returns', 'instance', 'returned', 'Predefined', 'gate', 'Gate', 'accepts', 'sends', 'triggers', 'calls', 'responds', 'response', 'interrupt', 'optional', 'mapped', 'omit', 'argument', 'optionally', 'run', 'parallel', 'parameter', 'every', 'component', 'is', 'quiet', 'for', 'terminate', 'where', 'it', 'assigned', 'Test', 'Configuration', 'Description', 'Implementation', 'uses', 'configuration', 'execute', 'bindings', 'Objective', 'description', 'Time', 'out', 'timer', 'start', 'stop', 'variable', 'waits', 'extends', 'SUT', 'Tester', 'Message', 'Procedure', 'In', 'Out', 'Exception', 'last', 'previous', 'first'
}; 
helper def: enums: Set (Ecore!EEnum)= Ecore!EEnum->allInstances()->asSet();
helper def: enumLiterals: Set (Ecore!EEnumLiteral) = thisModule.enums->collect(e | e.eLiterals);
helper context Ecore!EPackage def: basicDataTypes: Set(Ecore!EDataType) = Ecore!EDataType->allInstances()->
	select(type | not type.oclIsKindOf(Ecore!EEnum))->asSet();

helper def: dynamicAnnotationType: TDL!AnnotationType = OclUndefined;
helper context Ecore!EStructuralFeature def: isDynamicFeature: Boolean = 
	if (self.eAnnotations->select(a | a.source = 'dynamic' or a.source = 'aspect')->notEmpty()) then true else false endif;
helper context Ecore!EClass def: isDynamicClass: Boolean = 
	if (self.eAnnotations->select(a | a.source = 'dynamic' or a.source = 'aspect')->notEmpty()) then true else false endif;
helper def: abstractAnnotationType: TDL!AnnotationType = OclUndefined;

rule simpleConcreteStaticClass2Type{
	from class: Ecore!EClass (class.eAllStructuralFeatures.isEmpty() and not class.abstract and not class.isDynamicClass)
	to type: TDL!StructuredDataType(
		name <- if (thisModule.tokenNames.includes(class.name))
				then '_' + class.name
				else class.name
				endif)
	do{
		thisModule.tokenNames <- thisModule.tokenNames.append(type.name.toString());
	}
}
rule simpleConcreteDynamicClass2Type{
	from class: Ecore!EClass (class.eAllStructuralFeatures.isEmpty() and not class.abstract and class.isDynamicClass)
	to type: TDL!StructuredDataType(
		name <- if (thisModule.tokenNames.includes(class.name))
				then '_' + class.name
				else class.name
				endif,
		annotation <- dynamicAnnotation),
		dynamicAnnotation: TDL!Annotation(
			key <- if (thisModule.dynamicAnnotationType.oclIsUndefined())
				   then thisModule.eAnnotation2annotationType()
				   else thisModule.dynamicAnnotationType
				   endif,
			annotatedElement <- type)
	do{
		thisModule.tokenNames <- thisModule.tokenNames.append(type.name.toString());
	}
}
rule simpleAbstractStaticClass2Type{
	from class: Ecore!EClass (class.eAllStructuralFeatures.isEmpty() and class.abstract and not class.isDynamicClass)
	to type: TDL!StructuredDataType(
		name <- if (thisModule.tokenNames.includes(class.name))
				then '_' + class.name
				else class.name
				endif,
		annotation <- abstractAnnotation),
		abstractAnnotation: TDL!Annotation(
			key <- if (thisModule.abstractAnnotationType.oclIsUndefined())
				   then thisModule.abstract2annotationType()
				   else thisModule.abstractAnnotationType
				   endif,
			annotatedElement <- type)
	do{
		thisModule.tokenNames <- thisModule.tokenNames.append(type.name.toString());
	}
}
rule simpleAbstractDynamicClass2Type{
	from class: Ecore!EClass (class.eAllStructuralFeatures.isEmpty() and class.abstract and class.isDynamicClass)
	to type: TDL!StructuredDataType(
		name <- if (thisModule.tokenNames.includes(class.name))
				then '_' + class.name
				else class.name
				endif),
		abstractAnnotation: TDL!Annotation(
			key <- if (thisModule.abstractAnnotationType.oclIsUndefined())
				   then thisModule.abstract2annotationType()
				   else thisModule.abstractAnnotationType
				   endif,
			annotatedElement <- type),
		dynamicAnnotation: TDL!Annotation(
			key <- if (thisModule.dynamicAnnotationType.oclIsUndefined())
				   then thisModule.eAnnotation2annotationType()
				   else thisModule.dynamicAnnotationType
				   endif,
			annotatedElement <- type)
	do{
		thisModule.tokenNames <- thisModule.tokenNames.append(type.name.toString());
	}
}
rule featuredConcreteStaticClass2Type{
	from class: Ecore!EClass (class.eAllStructuralFeatures.notEmpty() 
								and class.eSuperTypes.isEmpty()
								and not class.abstract
								and not class.isDynamicClass)
	to type: TDL!StructuredDataType(
		name <- if (thisModule.tokenNames.includes(class.name))
				then '_' + class.name
				else class.name
				endif,
		member <- class.eStructuralFeatures-> collect(feature | 
				if (feature.eAnnotations.notEmpty() and feature.isDynamicFeature)
					then thisModule.dynamicFeature2annotatedMember(feature)
					else thisModule.staticFeature2member(feature)
					endif))
	do{
		thisModule.tokenNames <- thisModule.tokenNames.append(type.name.toString());
	}
}
rule featuredConcreteDynamicClass2Type{
	from class: Ecore!EClass (class.eAllStructuralFeatures.notEmpty() 
								and class.eSuperTypes.isEmpty()
								and not class.abstract
								and class.isDynamicClass)
	to type: TDL!StructuredDataType(
		name <- if (thisModule.tokenNames.includes(class.name))
				then '_' + class.name
				else class.name
				endif,
		member <- class.eStructuralFeatures-> collect(feature | 
				if (feature.eAnnotations.notEmpty() and feature.isDynamicFeature)
					then thisModule.dynamicFeature2annotatedMember(feature)
					else thisModule.staticFeature2member(feature)
					endif),
		annotation <- dynamicAnnotation),
		dynamicAnnotation: TDL!Annotation(
			key <- if (thisModule.dynamicAnnotationType.oclIsUndefined())
				   then thisModule.eAnnotation2annotationType()
				   else thisModule.dynamicAnnotationType
				   endif,
			annotatedElement <- type)
	do{
		thisModule.tokenNames <- thisModule.tokenNames.append(type.name.toString());
	}
}
rule featuredAbstractStaticClass2Type{
	from class: Ecore!EClass (class.eAllStructuralFeatures.notEmpty() 
								and class.eSuperTypes.isEmpty()
								and class.abstract
								and not class.isDynamicClass)
	to type: TDL!StructuredDataType(
		name <- if (thisModule.tokenNames.includes(class.name))
				then '_' + class.name
				else class.name
				endif,
		member <- class.eStructuralFeatures-> collect(feature | 
				if (feature.eAnnotations.notEmpty() and feature.isDynamicFeature)
					then thisModule.dynamicFeature2annotatedMember(feature)
					else thisModule.staticFeature2member(feature)
					endif),
		annotation <- abstractAnnotation),
		abstractAnnotation: TDL!Annotation(
			key <- if (thisModule.abstractAnnotationType.oclIsUndefined())
				   then thisModule.abstract2annotationType()
				   else thisModule.abstractAnnotationType
				   endif,
			annotatedElement <- type)
	do{
		thisModule.tokenNames <- thisModule.tokenNames.append(type.name.toString());
	}
}

rule featuredAbstractDynamicClass2Type{
	from class: Ecore!EClass (class.eAllStructuralFeatures.notEmpty() 
								and class.eSuperTypes.isEmpty()
								and class.abstract
								and class.isDynamicClass)
	to type: TDL!StructuredDataType(
		name <- if (thisModule.tokenNames.includes(class.name))
				then '_' + class.name
				else class.name
				endif,
		member <- class.eStructuralFeatures-> collect(feature | 
				if (feature.eAnnotations.notEmpty() and feature.isDynamicFeature)
					then thisModule.dynamicFeature2annotatedMember(feature)
					else thisModule.staticFeature2member(feature)
					endif)),
		abstractAnnotation: TDL!Annotation(
			key <- if (thisModule.abstractAnnotationType.oclIsUndefined())
				   then thisModule.abstract2annotationType()
				   else thisModule.abstractAnnotationType
				   endif,
			annotatedElement <- type),
		dynamicAnnotation: TDL!Annotation(
			key <- if (thisModule.dynamicAnnotationType.oclIsUndefined())
				   then thisModule.eAnnotation2annotationType()
				   else thisModule.dynamicAnnotationType
				   endif,
			annotatedElement <- type)
	do{
		thisModule.tokenNames <- thisModule.tokenNames.append(type.name.toString());
	}
}

rule concreteInheritedStaticClass2Type{
	from class: Ecore!EClass (class.eAllStructuralFeatures.notEmpty() 
								and class.eSuperTypes.notEmpty()
								and not class.abstract
								and not class.isDynamicClass)
	to type: TDL!StructuredDataType(
		name <- if (thisModule.tokenNames.includes(class.name))
				then '_' + class.name
				else class.name
				endif,
		member <- class.eStructuralFeatures-> collect(feature | 
				if (feature.eAnnotations.notEmpty() and feature.isDynamicFeature)
					then thisModule.dynamicFeature2annotatedMember(feature)
					else thisModule.staticFeature2member(feature)
					endif),
		extension <- thisModule.superClass2extension(class))
	do{
		thisModule.tokenNames <- thisModule.tokenNames.append(type.name.toString());
	}
}

rule concreteInheritedDynamicClass2Type{
	from class: Ecore!EClass (class.eAllStructuralFeatures.notEmpty() 
								and class.eSuperTypes.notEmpty()
								and not class.abstract
								and class.isDynamicClass)
	to type: TDL!StructuredDataType(
		name <- if (thisModule.tokenNames.includes(class.name))
				then '_' + class.name
				else class.name
				endif,
		member <- class.eStructuralFeatures-> collect(feature | 
				if (feature.eAnnotations.notEmpty() and feature.isDynamicFeature)
					then thisModule.dynamicFeature2annotatedMember(feature)
					else thisModule.staticFeature2member(feature)
					endif),
		extension <- thisModule.superClass2extension(class),
		annotation <- dynamicAnnotation),
		dynamicAnnotation: TDL!Annotation(
			key <- if (thisModule.dynamicAnnotationType.oclIsUndefined())
				   then thisModule.eAnnotation2annotationType()
				   else thisModule.dynamicAnnotationType
				   endif,
			annotatedElement <- type)
	do{
		thisModule.tokenNames <- thisModule.tokenNames.append(type.name.toString());
	}
}

rule abstractInheritedStaticClass2Type{
	from class: Ecore!EClass (class.eAllStructuralFeatures.notEmpty() 
								and class.eSuperTypes.notEmpty()
								and class.abstract
								and not class.isDynamicClass)
	to type: TDL!StructuredDataType(
		name <- if (thisModule.tokenNames.includes(class.name))
				then '_' + class.name
				else class.name
				endif,
		member <- class.eStructuralFeatures-> collect(feature | 
				if (feature.eAnnotations.notEmpty() and feature.isDynamicFeature)
					then thisModule.dynamicFeature2annotatedMember(feature)
					else thisModule.staticFeature2member(feature)
					endif),
		extension <- thisModule.superClass2extension(class),
		annotation <- abstractAnnotation),
		abstractAnnotation: TDL!Annotation(
			key <- if (thisModule.abstractAnnotationType.oclIsUndefined())
				   then thisModule.abstract2annotationType()
				   else thisModule.abstractAnnotationType
				   endif,
			annotatedElement <- type)
	do{
		thisModule.tokenNames <- thisModule.tokenNames.append(type.name.toString());
	}
}

rule abstractInheritedDynamicClass2Type{
	from class: Ecore!EClass (class.eAllStructuralFeatures.notEmpty() 
								and class.eSuperTypes.notEmpty()
								and class.abstract
								and class.isDynamicClass)
	to type: TDL!StructuredDataType(
		name <- if (thisModule.tokenNames.includes(class.name))
				then '_' + class.name
				else class.name
				endif,
		member <- class.eStructuralFeatures-> collect(feature | 
				if (feature.eAnnotations.notEmpty() and feature.isDynamicFeature)
					then thisModule.dynamicFeature2annotatedMember(feature)
					else thisModule.staticFeature2member(feature)
					endif),
		extension <- thisModule.superClass2extension(class)),
		abstractAnnotation: TDL!Annotation(
			key <- if (thisModule.abstractAnnotationType.oclIsUndefined())
				   then thisModule.abstract2annotationType()
				   else thisModule.abstractAnnotationType
				   endif,
			annotatedElement <- type),
		dynamicAnnotation: TDL!Annotation(
			key <- if (thisModule.dynamicAnnotationType.oclIsUndefined())
				   then thisModule.eAnnotation2annotationType()
				   else thisModule.dynamicAnnotationType
				   endif,
			annotatedElement <- type)
	do{
		thisModule.tokenNames <- thisModule.tokenNames.append(type.name.toString());
	}
}

unique lazy rule superClass2extension{
	from class: Ecore!EClass (class.eSuperTypes.notEmpty())
	to parent : TDL!Extension(
		extending <- class.eSuperTypes
	)
}
lazy rule staticFeature2member{
	from feature: Ecore!EStructuralFeature (feature.eAnnotations.isEmpty() or 
			(feature.eAnnotations.notEmpty() and (not feature.isDynamicFeature)))
	to member: TDL!Member(
		name <- if (thisModule.tokenNames.includes(feature.name))
				then '_' + feature.name
				else feature.name
				endif,
		dataType <- if (feature.oclIsKindOf(Ecore!EAttribute) and thisModule.enums->excludes(feature.eType))
					then  thisModule.dataType2simpleType(feature.eType)
					else feature.eType
					endif)
}
lazy rule dynamicFeature2annotatedMember{
	from feature: Ecore!EStructuralFeature (feature.eAnnotations.notEmpty() and feature.isDynamicFeature)
	to member: TDL!Member(
		name <- if (thisModule.tokenNames.includes(feature.name))
				then '_' + feature.name
				else feature.name
				endif,
		dataType <- if (feature.oclIsKindOf(Ecore!EAttribute) and thisModule.enums->excludes(feature.eType))
					then  thisModule.dataType2simpleType(feature.eType)
					else feature.eType
					endif,
		annotation <- memberAnnotation),
		memberAnnotation: TDL!Annotation(
			key <- if (thisModule.dynamicAnnotationType.oclIsUndefined())
				   then thisModule.eAnnotation2annotationType()
				   else thisModule.dynamicAnnotationType
				   endif,
			annotatedElement <- member)
}
unique lazy rule eAnnotation2annotationType{
	from feature: Ecore!EStructuralFeature
	to annotation: TDL!AnnotationType(
		name <- 'dynamic')
	do{
		thisModule.dynamicAnnotationType <- annotation;
	}
}
unique lazy rule abstract2annotationType{
	from class: Ecore!EClass
	to annotation: TDL!AnnotationType(
		name <- 'abstract')
	do{
		thisModule.abstractAnnotationType <- annotation;
	}
}
rule enum2simpleType{
	from enum: Ecore!EEnum
	to type : TDL!SimpleDataType(
		name <- if (thisModule.tokenNames.includes(enum.name))
				then '_' + enum.name
				else enum.name
				endif) 
	do{
		thisModule.tokenNames <- thisModule.tokenNames.append(type.name.toString());
	}
}
rule enumLiteral2simpleDataInstance{
	from enumLiteral: Ecore!EEnumLiteral
	to dataInstance: TDL!SimpleDataInstance(
		name <- if (thisModule.tokenNames.includes(enumLiteral.name))
				then '_' + enumLiteral.name
				else enumLiteral.name
				endif,
		dataType <- enumLiteral.eEnum)
	do{
		thisModule.tokenNames <- thisModule.tokenNames.append(dataInstance.name.toString());
	}
}
unique lazy rule dataType2simpleType{
	from dataType: Ecore!EDataType
	to type : TDL!SimpleDataType(
		name <- if (thisModule.tokenNames.includes(dataType.name))
				then '_' + dataType.name
				else dataType.name
				endif)
	do{
		thisModule.tokenNames <- thisModule.tokenNames.append(type.name.toString());
	}
}
rule tdlPackage{
	from package: Ecore!EPackage
	to dslTypesPackage: TDL!Package(
		name <- package.name.concat('SpecificTypes'),
		packagedElement <- package.eClassifiers.
							union(thisModule.enums).
							union(thisModule.enumLiterals).
							append(thisModule.dynamicAnnotationType).
							append(thisModule.abstractAnnotationType).
							union(package.basicDataTypes->collect(t | thisModule.dataType2simpleType(t))))
}